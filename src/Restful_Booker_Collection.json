{
	"info": {
		"_postman_id": "0d5f6871-d9a0-44d9-becb-fcdecd49d472",
		"name": "API_Automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Token",
			"item": [
				{
					"name": "Login and Url variable",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35a85bb2-0605-4d99-896c-a4e1c3856b44",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"//postman.setEnvironmentVariable(\"token\", jsonData.data.token);",
									"",
									"",
									"pm.globals.set(\"token\", jsonData.data.token);",
									"pm.globals.set(\"url\", \"https://phoenix-api-qa.ipublishcentral.com\");",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    console.log(jsonData.data.token);",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6cdde09d-619c-478a-9577-c349e4e3bd74",
								"exec": [
									" postman.setEnvironmentVariable(\"username\", \"uncle_scrooge@mail.com\");",
									" postman.setEnvironmentVariable(\"password\", \"duckburg\");",
									" "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"username\" : \"{{username}}\",\r\n\"password\" : \"{{password}}\"\r\n}"
						},
						"url": "https://phoenix-api-qa.ipublishcentral.com/account/v1/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tenants",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b050fa20-6905-4c75-a43d-347c6d517b23",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.tenant.id);",
									"pm.globals.set(\"nameGlobalValue\", jsonData.data.tenant.name);",
									"                                             ",
									"if(pm.response.code == 201){",
									"    pm.test(\"Data should be match with the given data\", function() {",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"company\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"firstName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"lastName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"designation\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"email\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"phone\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"mobile\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"isPrimary\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"address\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"country\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"state\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"zip\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"phone\")).to.equal(true);",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant\": {\r\n    \"company\": \"KMG Solutions\",\r\n    \"name\": \"Meera\",\r\n    \"contactEmail\": \"Meera123@mail.com\",\r\n    \"type\": \"tenant\",\r\n    \"parentId\": 100,\r\n    \"firstName\": \"Meera\",\r\n    \"lastName\": \"Roy\",\r\n    \"email\": \"meera123@mail.com\",\r\n    \"password\": \"Addam123\",\r\n    \"address\": \"EGL\",\r\n    \"country\": \"India\",\r\n    \"state\": \"Karnataka\",\r\n    \"zip\": \"123456\",\r\n\t\"phone\": \"04802800000\",\r\n    \"contacts\": [\r\n      {\r\n        \"firstName\": \"Adwid\",\r\n        \"lastName\": \"Adwid\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"sample@email.com\",\r\n        \"phone\": \"04802800000\",\r\n        \"mobile\": \"+919883241000\",\r\n        \"isPrimary\": true\r\n      }\r\n    ]\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/account/v1/register"
					},
					"response": []
				},
				{
					"name": "Tenants Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b050fa20-6905-4c75-a43d-347c6d517b23",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.tenant.id);",
									"pm.globals.set(\"nameGlobalValue\", jsonData.data.tenant.name);",
									"                                             ",
									"if(pm.response.code == 201){",
									"    pm.test(\"Data should be match with the given data\", function() {",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"company\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"firstName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"lastName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"designation\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"email\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"phone\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"mobile\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"isPrimary\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"address\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"country\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"state\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"zip\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"phone\")).to.equal(true);",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant\": {\r\n    \"company\": \"TRK Solutions\",\r\n    \"name\": \"Taran\",\r\n    \"contactEmail\": \"taran1234@mail.com\",\r\n    \"type\": \"tenant\",\r\n    \"parentId\": 100,\r\n    \"firstName\": \"taran roy\",\r\n    \"lastName\": \"Roy\",\r\n    \"email\": \"taran1234@mail.com\",\r\n    \"password\": \"Addam123\",\r\n    \"address\": \"EGL\",\r\n    \"country\": \"India\",\r\n    \"state\": \"Karnataka\",\r\n    \"zip\": \"123456\",\r\n\t\"phone\": \"04802800000\",\r\n    \"contacts\": [\r\n      {\r\n        \"firstName\": \"Adwid\",\r\n        \"lastName\": \"Adwid\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"sample@email.com\",\r\n        \"phone\": \"04802800000\",\r\n        \"mobile\": \"+919883241000\",\r\n        \"isPrimary\": true\r\n      }\r\n    ]\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/account/v1/tenants"
					},
					"response": []
				},
				{
					"name": "Tenants list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c0c601f-20ee-4c3e-af30-40bdb027f804",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    ",
									"     //verify user count",
									"    pm.test(\"Status code name has string\", function () {",
									"        tests[\"Total Page size\"] = jsonData.data._pagination.totalCount === jsonData.data.tenants.length;",
									"    });",
									"",
									"    pm.test(\"Data types should be as expected\", function() {",
									"        for(var i=0;i<jsonData.data.tenants.length;i++){",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"company\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.tenants[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"        }",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/tenants?page-number=1&page-size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"tenants"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Tenants id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0509ed17-6cf9-43c4-8eb5-64b54c420f1b",
								"exec": [
									"var responseJson = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var IdGlobalValue = IdGlobalValue;",
									"",
									"if(pm.response.code == 200){",
									"    //verify user count",
									"    pm.test(\"Respose data validation\", function () {",
									"         tests[\"ID 1 found\"] = responseJson.data.tenants.id === IdGlobalValue;",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/tenants?name={{nameGlobalValue}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"tenants"
							],
							"query": [
								{
									"key": "name",
									"value": "{{nameGlobalValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TenantTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7817220-a642-435c-9ce7-ef6774f4be7c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var types = [\"Publisher\",\"Health\",\"Aggregator\",\"Individual\",\"Reseller\"];",
									"var codeValues = [\"publisher\",\"health\",\"aggregator\",\"individual\",\"reseller\"];",
									"",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"if(pm.response.code == 200){",
									"     for (var i =0; i<types.length-1;i++) {",
									"        result = responseJson.data.tenantType[i].name;",
									"        if (types[i] === result)",
									"            tests[i + \" types value is mached \"+ responseJson.data.tenantType[i].name] = true;",
									"        else",
									"            tests[i + \" types value is not mached\"] = false;",
									"",
									"    }",
									"    ",
									"    for (var i =0; i<codeValues.length-1;i++) {",
									"        result = responseJson.data.tenantType[i].code;",
									"        if (codeValues[i] === result)",
									"            tests[i + \" code Values value is mached \"+ responseJson.data.tenantType[i].code] = true;",
									"        else",
									"            tests[i + \" code Values value is not mached\"] = false;",
									"",
									"    }",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"   "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/tenantTypes"
					},
					"response": []
				},
				{
					"name": "Patch tenant",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae61cd8d-fb06-442d-8d41-4554d1be397f",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"IdGlobalValue = pm.globals.get('IdGlobalValue'); ",
									"",
									"if(pm.response.code == 201){",
									"    pm.test(\"Data should be match with the given data\", function() {",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"company\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"firstName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"lastName\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"designation\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"email\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"phone\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"mobile\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.contacts[0].hasOwnProperty(\"isPrimary\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"address\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"country\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"state\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"zip\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.tenant.hasOwnProperty(\"phone\")).to.equal(true);",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenant\": {\r\n    \"company\": \"TRK Solutions\",\r\n    \"name\": \"Taran\",\r\n    \"contactEmail\": \"taran1234@mail.com\",\r\n    \"type\": \"tenant\",\r\n    \"parentId\": 100,\r\n    \"firstName\": \"taran roy\",\r\n    \"lastName\": \"Roy\",\r\n    \"email\": \"taran1234@mail.com\",\r\n    \"password\": \"Addam123\",\r\n    \"address\": \"EGL\",\r\n    \"country\": \"India\",\r\n    \"state\": \"Karnataka\",\r\n    \"zip\": \"123456\",\r\n\t\"phone\": \"04802800000\",\r\n    \"contacts\": [\r\n      {\r\n        \"firstName\": \"Adwid\",\r\n        \"lastName\": \"Adwid\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"sample@email.com\",\r\n        \"phone\": \"04802800000\",\r\n        \"mobile\": \"+919883241000\",\r\n        \"isPrimary\": true\r\n      }\r\n    ]\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/account/v1/tenants/{{IdGlobalValue}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Post User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "46bbc190-993e-46b4-b8f2-35479fb85236",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Data should be match with the given data\", function() {",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"firstName\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"lastName\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"email\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"phone\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"loginAt\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"loginCount\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"department\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"joiningDate\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"assignmentCount\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"designation\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"employeeCode\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"gender\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"isVerified\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"userTypeId\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"userTypeName\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"userTypeCode\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"isEmailVerified\")).to.equal(true);",
									"        pm.expect(jsonData.data.user.hasOwnProperty(\"isPhoneVerified\")).to.equal(true);",
									"    });",
									"    ",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.user.id);",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user\": {\r\n    \"firstName\": \"rajeev\",\r\n    \"lastName\": \"roy\",\r\n    \"type\": \"user\",\r\n    \"email\": \"Bony12@mail.com\",\r\n    \"password\": \"Raghu@123\"\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/users"
					},
					"response": []
				},
				{
					"name": "Users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Verify Status code",
									"pm.test(\"Status code is 200\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    //verify user count",
									"    tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"    //Verify type",
									"    pm.test(\"Verify the type should be user\", function () {",
									"    for(var i=0;i<jsonData.data.users.length;i++){",
									"        pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"        }",
									"    });",
									"",
									"    // Verify users types",
									"    pm.test(\"Verify the type should be userTypeName\", function () {",
									"    for(var i=0;i<jsonData.data.users.length;i++){",
									"        if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"            tests[\"userTypeName value is mached\"] = true;",
									"        }",
									"        else",
									"        {",
									"            tests[\"userTypeName value is not mached\"] = false;",
									"        }",
									"    }",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/users"
					},
					"response": []
				},
				{
					"name": "Get User by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Verify Status code",
									"pm.test(\"Status code is 200\", function () {",
									"     pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.user.hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.user.hasOwnProperty(\"firstName\")).to.equal(true);",
									"    pm.expect(jsonData.data.user.hasOwnProperty(\"lastName\")).to.equal(true);",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/users/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Update Role of User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2dc0d959-b2e0-4a91-8225-e313adc8d27c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.response.to.have.header(\"Content-Type\");",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"roles\": [\r\n    {\r\n      \"id\": 4\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/users/{{IdGlobalValue}}/roles"
					},
					"response": []
				},
				{
					"name": "User Uploader",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "833f3cec-9dc8-4f6f-9dd1-f263f267410c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Status code is 200\", function () {",
									"//     pm.response.to.have.status(200);",
									"// });",
									"",
									"",
									"if(pm.response.code == 200){",
									"  tests[\"File is uploaded succefully\"] = jsonData.data.import.status === \"PENDING\";",
									"  tests[\"File is uploaded succefully\"] = jsonData.data.import.type === \"user\";",
									"  tests[\"File is uploaded succefully\"] = jsonData.data.import.fileName === \"user_upload (4).csv\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = true;",
									"    tests[\"The message is \"+jsonData.error.message] = true;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": "{{url}}/account/v1/userUploader"
					},
					"response": []
				},
				{
					"name": "Search Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18bf9c2a-1936-4843-8d7b-b18f2c95b7ae",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"   ",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/users/2643/searchUsers?fields=designation",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"users",
								"2643",
								"searchUsers"
							],
							"query": [
								{
									"key": "fields",
									"value": "designation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Meta Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fa5691e-6b45-4594-b7b6-9297e90d4c7f",
								"exec": [
									"",
									"var responseJson = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    ",
									"  tests[\"Data is found\"] = responseJson.data.designation[0] === \"Tester\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/userMetaValues?meta=designation",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"userMetaValues"
							],
							"query": [
								{
									"key": "meta",
									"value": "designation"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BulkUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4e73c2d-5528-4bfc-94de-a9562d0e3560",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 201){",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"firstName\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"lastName\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"email\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"type\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"phone\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"isActive\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"loginAt\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"loginCount\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"department\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"joiningDate\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"assignmentCount\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"designation\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"employeeCode\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"gender\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"isVerified\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"userTypeId\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"userTypeName\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"userTypeCode\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"isEmailVerified\")).to.equal(true);",
									"    pm.expect(jsonData.data.users[0].hasOwnProperty(\"isPhoneVerified\")).to.equal(true);",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"name\": \"Broker88\",\r\n      \"email\": \"Brker88@mail.com\",\r\n      \"department\": \"\",\r\n      \"designation\": \"\",\r\n      \"dateOfJoining\": \"\",\r\n      \"employeeId\": \"strin88\",\r\n      \"gender\": \"Male\",\r\n      \"phone\": 1231231200,\r\n      \"role\": \"learner\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/bulkUsers"
					},
					"response": []
				},
				{
					"name": "Get userTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3dc36f4-2ac5-4185-bfcf-46e88453395a",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify the data as expected\", function () {",
									"      for(var i=0;i<jsonData.data.userTypes.length;i++){",
									"        pm.expect(jsonData.data.userTypes[i].hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.userTypes[i].hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.userTypes[i].hasOwnProperty(\"code\")).to.equal(true);",
									"      }",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/userTypes"
					},
					"response": []
				},
				{
					"name": "UserInvitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09ce81b5-4bcc-4631-ad6b-25ddc600056c",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"id\": 4977,\r\n      \"phone\": \"919999000123\",\r\n      \"email\": \"rob11@gmail.com\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/userInvitations"
					},
					"response": []
				},
				{
					"name": "User Email Invitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd93a0f4-59d9-49c9-a77a-f5157cf32acd",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n     \"id\": 4977\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/userEmailInvitations"
					},
					"response": []
				},
				{
					"name": "Validate Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d36937b1-0235-4fee-8e07-3f902cef9fa6",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/validateUsers?userIds=3557",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"validateUsers"
							],
							"query": [
								{
									"key": "userIds",
									"value": "3557"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Invitation Reminders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c494bf27-2b9a-43c9-b56d-e3e14240a66e",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"tenants\": [\r\n    {\r\n      \"id\": 4977\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/userInvitationReminders"
					},
					"response": []
				}
			]
		},
		{
			"name": "RolePermission",
			"item": [
				{
					"name": "Post Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e78ade4-c494-4764-9625-a2b2d9db519f",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.test(\"Data should be match with the given data\", function() {",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"siteId\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"institutionId\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"description\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"code\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"isGlobal\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.role.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"    });",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.role.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"role\": {\r\n    \"name\": \"Admin Student3\",\r\n    \"code\": \"Administrator\",\r\n    \"description\": \"Administrator Role\",\r\n    \"type\": \"tenant\",\r\n    \"siteId\": \"4\",\r\n    \"institutionId\": 4,\r\n    \"isGlobal\": true\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/roles"
					},
					"response": []
				},
				{
					"name": "Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ffa3856-0241-49f2-b7d0-be54021691f0",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Verify the data as expected\", function() {",
									"        for (var i = 0; i < jsonData.data.roles.length; i++) {",
									"            if (jsonData.data.roles[i].length = 9) {",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"id\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"type\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"name\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"description\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"code\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"isGlobal\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            } else {",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"id\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"institutionId\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"type\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"name\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"description\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"code\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"isGlobal\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"                pm.expect(jsonData.data.roles[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            }",
									"        }",
									"    });",
									"    //verify user count",
									"    pm.test(\"Status code name has string\", function() {",
									"        tests[\"Total number of roles\"] = jsonData.data._pagination.totalCount === jsonData.data.roles.length;",
									"    });",
									"",
									"} else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/roles"
					},
					"response": []
				},
				{
					"name": "Add user to roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c99ce8a7-58b6-4976-a3d9-23d2a1fe400b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var IdGlobalValue = IdGlobalValue",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"Verify data as expected\", function() {",
									"        pm.expect(jsonData.data.roleUsers.id).to.equal(IdGlobalValue);",
									"        pm.expect(jsonData.data.roleUsers[0].hasOwnProperty(\"userId\")).to.equal(true);",
									"        pm.expect(jsonData.data.roleUsers[0].hasOwnProperty(\"roleId\")).to.equal(true);",
									"        pm.expect(jsonData.data.roleUsers[0].hasOwnProperty(\"isRestricted\")).to.equal(true);",
									"    });",
									"} else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"users\": [\n   {\n                \"id\": 3472,\n                \"firstName\": \"911232345434\",\n                \"lastName\": null,\n                \"email\": null,\n                \"tenantId\": 1,\n                \"type\": \"user\",\n                \"phone\": \"911232345434\",\n                \"isActive\": false,\n                \"createdTime\": \"2018-11-07T12:34:54Z\",\n                \"updatedTime\": \"2018-11-07T12:34:54Z\",\n                \"loginAt\": \"2018-11-07T12:34:54.000Z\",\n                \"loginCount\": 0,\n                \"department\": null,\n                \"joiningDate\": null,\n                \"assignmentCount\": 0,\n                \"designation\": null,\n                \"employeeCode\": null,\n                \"gender\": null,\n                \"isVerified\": false,\n                \"userTypeId\": 3,\n                \"userTypeName\": \"Learner\",\n                \"userTypeCode\": \"learner\",\n                \"isEmailVerified\": null,\n                \"isPhoneVerified\": null\n            }\n  ]\n}"
						},
						"url": "{{url}}/account/v1/roles/{{IdGlobalValue}}/users"
					},
					"response": []
				},
				{
					"name": "Get Role by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a281452a-7414-40e7-b1e2-5d5bcb86ef6b",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function() {",
									"        pm.expect(jsonData.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"siteId\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"institutionId\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"description\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"code\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"isGlobal\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/roles/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "ResourceGroups by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78986ad-988a-4828-af53-e0d4a89e5ef5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function() {",
									"        for(var i=0;i<jsonData.data.resourceGroups.length;i++){",
									"            pm.expect(jsonData.data.resourceGroups[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.resourceGroups[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.resourceGroups[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.resourceGroups[i].hasOwnProperty(\"resources\")).to.equal(true);",
									"        }",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/roles/3/resourceGroups"
					},
					"response": []
				},
				{
					"name": "resourceGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e78986ad-988a-4828-af53-e0d4a89e5ef5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"      pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"",
									"    //verify user count",
									"    pm.test(\"Status code name has string\", function () {",
									"        tests[\"Total number of roles\"] = jsonData.data._pagination.pageSize === jsonData.data.resourceGroups.length;",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/resourceGroups"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sites",
			"item": [
				{
					"name": "SITE",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//verify user count",
									"pm.test(\"Status code name has string\", function () {",
									"    tests[\"Total number of roles\"] = jsonData.data._pagination.totalCount === jsonData.data.roles.length;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"site\": {\r\n    \"name\": \"Site academey\",\r\n    \"code\": \"siteacademey\",\r\n    \"url\": \"https://academy.impelsys.com/explore/categories\"\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/account/v1/sites"
					},
					"response": []
				},
				{
					"name": "Sites",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//verify user count",
									"pm.test(\"Status code name has string\", function () {",
									"    tests[\"Total number of roles\"] = jsonData.data._pagination.totalCount === jsonData.data.roles.length;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/sites"
					},
					"response": []
				},
				{
					"name": "Site by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function() {",
									"        for(var i=0;i<jsonData.data.sites.length;i++){",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"status\")).to.equal(true);",
									"        }",
									"    });",
									"    //verify user count",
									"    pm.test(\"response data\", function () {",
									"        tests[\"Total number of sites\"] = jsonData.data._pagination.totalCount === jsonData.data.sites.length;",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/sites/2"
					},
					"response": []
				},
				{
					"name": "Site by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function() {",
									"        for(var i=0;i<jsonData.data.sites.length;i++){",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.sites[i].hasOwnProperty(\"status\")).to.equal(true);",
									"        }",
									"    });",
									"    //verify user count",
									"    pm.test(\"response data\", function () {",
									"        tests[\"Total number of sites\"] = jsonData.data._pagination.totalCount === jsonData.data.sites.length;",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"site\": {\r\n    \"name\": \"Site yenapoya\",\r\n    \"url\": \"https://yenepoyaqa.ipchealth.in\",\r\n    \"isActive\": true\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/sites/2"
					},
					"response": []
				},
				{
					"name": "Update  sites settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//verify user count",
									"pm.test(\"Status code name has string\", function () {",
									"    tests[\"Total number of roles\"] = jsonData.data._pagination.totalCount === jsonData.data.roles.length;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"siteSettings\": {\r\n    \"configGroups\": [\r\n      {\r\n        \"id\": 111,\r\n        \"settings\": {\r\n          \"theme\": \"default\",\r\n          \"language\": \"uk\",\r\n          \"search\": \"by name\"\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/sites/2/settings"
					},
					"response": []
				},
				{
					"name": "Settings by site id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Status code name has string\", function () {",
									"        tests[\"Total number of roles\"] = jsonData.data._pagination.totalCount === jsonData.data._pagination.length;",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/sites?id=2/settings",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"sites"
							],
							"query": [
								{
									"key": "id",
									"value": "2/settings"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sites configs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c11e1d99-eba0-49bb-b429-eed908da9bc3",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/sites/2/configs"
					},
					"response": []
				}
			]
		},
		{
			"name": "Institution",
			"item": [
				{
					"name": "BatchInstitutionActivator",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Content-Type is present\", function () {",
									"      pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/batchInstitutionActivator"
					},
					"response": []
				},
				{
					"name": "institutions by institution id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/institutions?id=13048",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"institutions"
							],
							"query": [
								{
									"key": "id",
									"value": "13048"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "institutions by institution id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"institution\": {\r\n    \"parentId\": 23,\r\n    \"name\": \"institution 1\",\r\n    \"code\": \"institution1\",\r\n    \"institutionTypeId\": 1,\r\n    \"contactName\": \"Contact Name 1\",\r\n    \"contactEmail\": \"contact@email.com\",\r\n    \"contactNumber\": \"9538354305\",\r\n    \"isdCode\": \"92\",\r\n    \"region\": \"Northeast\",\r\n    \"address\": \"#57, 1st Block, MG Road\",\r\n    \"country\": \"IN\",\r\n    \"state\": \"Karnataka\",\r\n    \"zip\": \"560134\",\r\n    \"url\": \"https://yenepoya.ipchealth.com\",\r\n    \"description\": \"Institutions description\",\r\n    \"summary\": \"Institutions summary\",\r\n    \"isTrial\": true,\r\n    \"isActive\": true,\r\n    \"userLimit\": 1000,\r\n    \"contacts\": [\r\n      {\r\n        \"firstName\": \"firstname 1\",\r\n        \"lastName\": \"lastname 1\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"contact@email.com\",\r\n        \"phone\": \"04802809876\",\r\n        \"mobile\": \"9883242342\",\r\n        \"isdCode\": \"91\",\r\n        \"isPrimary\": true\r\n      }\r\n    ],\r\n    \"updateContacts\": [\r\n      {\r\n        \"id\": 1,\r\n        \"firstName\": \"firstname 1\",\r\n        \"lastName\": \"lastname 1\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"contact@email.com\",\r\n        \"phone\": \"04802809876\",\r\n        \"mobile\": \"9738354305\",\r\n        \"isdCode\": \"91\",\r\n        \"isPrimary\": true\r\n      }\r\n    ],\r\n    \"settings\": {\r\n      \"logo\": \"Institution log link\",\r\n      \"ssoEnabled\": true,\r\n      \"ssoType\": \"azureB2C\",\r\n      \"ssoRuleType\": \"email\",\r\n      \"institutionKey\": \"INST\",\r\n      \"emailDomains\": [\r\n        \"@zenu.com\"\r\n      ]\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/account/v1/institutions?id=909",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"institutions"
							],
							"query": [
								{
									"key": "id",
									"value": "909"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "institutions by institution id and Site Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/sites/2/institutions/14"
					},
					"response": []
				},
				{
					"name": "Institutions with users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function () {",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"totalCount\")).to.equal(true);",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"totalPages\")).to.equal(true);",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"isFirst\")).to.equal(true);",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"isLast\")).to.equal(true);",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"pageNumber\")).to.equal(true);",
									"        pm.expect(jsonData.data._pagination.hasOwnProperty(\"pageSize\")).to.equal(true);",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/institutions/49/users"
					},
					"response": []
				},
				{
					"name": "institutionTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "407345dc-4e8e-42bd-b838-456cb0ab2e87",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function () {",
									"         for(var i=0;i<jsonData.data.institutionTypes.length;i++){",
									"            pm.expect(jsonData.data.institutionTypes[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutionTypes[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutionTypes[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutionTypes[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutionTypes[i].hasOwnProperty(\"isDefault\")).to.equal(true);",
									"         }",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/institutionTypes"
					},
					"response": []
				},
				{
					"name": "Institutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/institutions?page-number=10&page-size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"institutions"
							],
							"query": [
								{
									"key": "page-number",
									"value": "10"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Institutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"institution\": {\r\n    \"parentId\": 23,\r\n    \"name\": \"Manipal Gloabal Hospital\",\r\n    \"code\": \"MGH_123\",\r\n    \"institutionTypeId\": 1,\r\n    \"contactName\": \"Jon snow\",\r\n    \"contactEmail\": \"jon123@email.com\",\r\n    \"contactNumber\": \"9538354111\",\r\n    \"isdCode\": \"92\",\r\n    \"region\": \"Northeast\",\r\n    \"address\": \"#57, 1st Block, MG Road\",\r\n    \"country\": \"IN\",\r\n    \"state\": \"Karnataka\",\r\n    \"zip\": \"560134\",\r\n    \"url\": \"https://yenepoya.ipchealth.com\",\r\n    \"description\": \"Institutions description\",\r\n    \"summary\": \"Institutions summary\",\r\n    \"isTrial\": true,\r\n    \"trialStartAt\": \"2019-07-09T06:09:12.805Z\",\r\n    \"trialEndAt\": \"2019-07-09T06:09:12.806Z\",\r\n    \"contractStartAt\": \"2019-07-09T06:09:12.806Z\",\r\n    \"contractEndAt\": \"2019-07-09T06:09:12.806Z\",\r\n    \"createdTime\": \"2019-07-09T06:09:12.806Z\",\r\n    \"updatedTime\": \"2019-07-09T06:09:12.806Z\",\r\n    \"isActive\": true,\r\n    \"contacts\": [\r\n      {\r\n        \"firstName\": \"sam\",\r\n        \"lastName\": \"well\",\r\n        \"designation\": \"sample designation\",\r\n        \"email\": \"sam@gmail.com\",\r\n        \"phone\": \"04802809876\",\r\n        \"mobile\": \"9883242342\",\r\n        \"isdCode\": \"91\",\r\n        \"isPrimary\": true\r\n      }\r\n    ],\r\n    \"settings\": {\r\n      \"logo\": \"\",\r\n      \"ssoEnabled\": true,\r\n      \"ssoType\": \"azureB2C\",\r\n      \"ssoRuleType\": \"email\",\r\n      \"emailDomains\": [\r\n        \"@apolomainhospital.com\",\r\n        \"@laredal.com\"\r\n      ]\r\n    },\r\n    \"users\": [\r\n      {\r\n        \"name\": \"sam\",\r\n        \"email\": \"sam@mail,com\",\r\n        \"department\": \"string\",\r\n        \"designation\": \"string\",\r\n        \"dateOfJoining\": \"2017-07-21\",\r\n        \"employeeId\": \"string\",\r\n        \"gender\": \"Male\",\r\n        \"phone\": 9999999999,\r\n        \"isdCode\": 91,\r\n        \"role\": \"learner\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/institutions"
					},
					"response": []
				},
				{
					"name": "institutionsByDomain",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.institutions.length;i++){",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"siteId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"parentId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"institutionTypeId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactName\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contactEmail\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contacts\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"address\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"country\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"state\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"zip\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isTrial\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trialEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractStartAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"subscriptionCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"settings\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"summary\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"users\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"contractEndAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"isdCode\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"region\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"active\")).to.equal(true);",
									"            pm.expect(jsonData.data.institutions[i].hasOwnProperty(\"trial\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/institutionsByDomain?domain=@laerdal.com",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"institutionsByDomain"
							],
							"query": [
								{
									"key": "domain",
									"value": "@laerdal.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "institutionSignup",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"packageId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"totalPrice\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"planDuration\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"planPeriodicity\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"startDate\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"trialDuration\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"email\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"designation\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"primaryContact\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"institutionAddress\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"communicationAddress\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"users\")).to.equal(true);",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"institution\": {\r\n    \"name\": \"NMJ Medicals\",\r\n    \"authorizedRepresentative\": {\r\n      \"name\": \"NMJ Mostly\",\r\n      \"email\": \"nmjmostly@mail.com\",\r\n      \"designation\": \"master zen\",\r\n      \"phone\": 911234567111\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/institutionSignup"
					},
					"response": []
				},
				{
					"name": "institutionSignup:step1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"packageId\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"totalPrice\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"planDuration\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"planPeriodicity\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"startDate\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"trialDuration\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"email\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"designation\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.authorizedRepresentative.hasOwnProperty(\"phone\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"primaryContact\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"institutionAddress\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"communicationAddress\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"userLimit\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"url\")).to.equal(true);",
									"            pm.expect(jsonData.data.institution.hasOwnProperty(\"users\")).to.equal(true);",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"institution\": {\r\n    \"id\": 9109,\r\n    \"packageId\": 1,\r\n    \"price\": 1000,\r\n    \"planDuration\": 1,\r\n    \"planPeriodicity\": \"2019/06\",\r\n    \"startDate\": \"2019-07-12T09:23:42.959Z\",\r\n    \"trialDuration\": 1\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/institutionSignup:step1"
					},
					"response": []
				}
			]
		},
		{
			"name": "User Group",
			"item": [
				{
					"name": "GET user Group MetaValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function () {",
									"       for(var i=0;i<jsonData.data.createdBy.length;i++){",
									"            pm.expect(jsonData.data.createdBy[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.createdBy[i].hasOwnProperty(\"id\")).to.equal(true);",
									"        }  ",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/userGroupMetaValues?field=createdBy",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"userGroupMetaValues"
							],
							"query": [
								{
									"key": "field",
									"value": "createdBy"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "User Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 201\", function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"console.log(jsonData.data.userGroup.id);",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.userGroup.id);",
									"console.log(pm.variables.get('IdGlobalValue'));",
									"",
									"if(pm.response.code == 201){",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"name\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"code\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"userCount\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"createdByName\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"description\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"isActive\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.userGroup.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userGroup\": {\r\n    \"name\": \"UserGroup380\",\r\n    \"code\": \"GROUP34\",\r\n    \"description\": \"user group description\",\r\n    \"users\": [\r\n      {\r\n        \"id\": 3557\r\n      }\r\n    ],\r\n    \"excludedUsers\": [\r\n      {\r\n        \"id\": 2643\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/account/v1/userGroups"
					},
					"response": []
				},
				{
					"name": "GET user Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.userGroups.length;i++){",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdByName\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        }",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/userGroups"
					},
					"response": []
				},
				{
					"name": "User Group by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userGroup\": {\r\n    \"name\": \"Admin Users\",\r\n    \"description\": \"Group of admin users\",\r\n    \"users\": [\r\n      {\r\n        \"id\": 2643\r\n      }\r\n    ],\r\n    \"removeUsers\": [\r\n      {\r\n        \"id\": 3567\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/account/v1/userGroups?id=127",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"userGroups"
							],
							"query": [
								{
									"key": "id",
									"value": "127"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET user Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.userGroups.length;i++){",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdByName\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/userGroups"
					},
					"response": []
				},
				{
					"name": "User  Search Group by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.userGroups.length;i++){",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdByName\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/userGroups/{{IdGlobalValue}}/users"
					},
					"response": []
				},
				{
					"name": "searchUserGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.userGroups.length;i++){",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"userCount\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdByName\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"description\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"            pm.expect(jsonData.data.userGroups[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"        }",
									"      });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/searchUserGroups?ids={{IdGlobalValue}}&fields=code",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"searchUserGroups"
							],
							"query": [
								{
									"key": "ids",
									"value": "{{IdGlobalValue}}"
								},
								{
									"key": "fields",
									"value": "code"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userGroupUserLinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9cbf422-560f-4a5d-97f3-9a1c9922bae9",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userGroupUserLinks\": [\r\n    {\r\n      \"userGroupId\": 1,\r\n      \"userId\": 1\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/account/v1/userGroupUserLinks"
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/apikeys:sync"
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "  {\r\n    \"iss\" : 8,\r\n    \"sub\" : \"duckburgInc\",\r\n    \"user_id\": \"1simi.mariam@impelsys.com\",\r\n    \"fn\": \"\",\r\n    \"ln\": \"\",\r\n    \"email\": \"1simi.mariam@impelsys.com\",\r\n    \"user_roles\":[1,2],\r\n    \"institutions\": \"[1,2]\",\r\n    \"instId\": \"3\",\r\n    \"userGroups\": \"[1,2,3]\",\r\n    \"type\" : \"admin\",\r\n    \"admin\": false,\r\n    \"ct\": 9871144925209962,\r\n    \"iat\": 1537974647,\r\n    \"exp\": 1538061047\r\n  }"
						},
						"url": "{{url}}/account/v1/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "Validator",
			"item": [
				{
					"name": "Validator",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"validators\": [\r\n    {\r\n      \"resource\": \"tenant\",\r\n      \"field\": \"name\",\r\n      \"value\": \"Tenant Name\"\r\n    }\r\n  ]\r\n}\r\n"
						},
						"url": {
							"raw": "{{url}}/account/v1/validators",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"validators"
							],
							"query": [
								{
									"key": "Content-Type",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "configs",
			"item": [
				{
					"name": "Create configGroups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e7eaf37-579a-4501-bab2-06079e456416",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"configGroup\": {\r\n    \"name\": \"name\",\r\n    \"type\": \"type\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/account/v1/configGroups?",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"configGroups"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create configGroups Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e7eaf37-579a-4501-bab2-06079e456416",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"configGroup\": {\r\n    \"name\": \"name\",\r\n    \"type\": \"type\"\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/account/v1/configGroups/2?",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"configGroups",
								"2"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create configGroups Copy Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e7eaf37-579a-4501-bab2-06079e456416",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"  pm.response.to.have.header(\"Content-Type\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"configs\": [\r\n    {\r\n      \"id\": 111,\r\n      \"optionValue\": {\r\n        \"theme\": \"default\"\r\n      },\r\n      \"type\": \"type\",\r\n      \"optionType\": \"option type\",\r\n      \"defaultValue\": \"default value\",\r\n      \"name\": \"name\",\r\n      \"isReadOnly\": \"true\",\r\n      \"isMandatory\": \"true\",\r\n      \"sortOrder\": 1\r\n    }\r\n  ]\r\n}"
						},
						"url": {
							"raw": "{{url}}/account/v1/configGroups/2/configs?",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"configGroups",
								"2",
								"configs"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Registration",
			"item": [
				{
					"name": "User Verify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d83934-b71a-41c3-aa5c-d5c46e0fb58a",
								"exec": [
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.hasOwnProperty(\"phone\")).to.equal(true);",
									"    pm.expect(jsonData.data.hasOwnProperty(\"smsSenderId\")).to.equal(true);",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"type\": \"phone\",\r\n  \"value\": \"911234567890\"\r\n}"
						},
						"url": "{{url}}/account/v1/userVerify"
					},
					"response": []
				},
				{
					"name": "User otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d83934-b71a-41c3-aa5c-d5c46e0fb58a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": \"2722\",\r\n  \"type\": \"user\"\r\n}"
						},
						"url": "{{url}}/account/v1/otp"
					},
					"response": []
				},
				{
					"name": "User Verify otp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d83934-b71a-41c3-aa5c-d5c46e0fb58a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": 3567,\r\n  \"otp\": 123456,\r\n  \"type\": \"VERIFICATION\"\r\n}"
						},
						"url": "{{url}}/account/v1/otpVerify"
					},
					"response": []
				},
				{
					"name": "User Verify emailVerify",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8d83934-b71a-41c3-aa5c-d5c46e0fb58a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"code\": \"ID411\"\r\n}"
						},
						"url": "{{url}}/account/v1/emailVerify"
					},
					"response": []
				}
			]
		},
		{
			"name": "Import",
			"item": [
				{
					"name": "Imports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     for(var i=0;i<jsonData.data.imports.length;i++){",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"createdByName\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"type\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"fileName\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"filePath\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"status\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"total\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"successCount\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"failureCount\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"errorFilePath\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.imports[0].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"     }",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/imports"
					},
					"response": []
				},
				{
					"name": "Import files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"errorFile\")).to.equal(true);",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"importFile\")).to.equal(true);",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/imports/256/files"
					},
					"response": []
				},
				{
					"name": "Import Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/account/v1/imports/256"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "Import Id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd8d475b-220e-43db-84ed-fd6943d0cbde",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.import.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"}",
									"else if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/account/v1/userTempPasswords:export?userIds=2722",
							"host": [
								"{{url}}"
							],
							"path": [
								"account",
								"v1",
								"userTempPasswords:export"
							],
							"query": [
								{
									"key": "userIds",
									"value": "2722"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Uploads",
			"item": [
				{
					"name": "Upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 201){",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"     tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"upload\": {\r\n    \"type\": \"local\",\r\n    \"assets\": [\r\n      {\r\n        \"name\": \"sampel.ext\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/uploads"
					},
					"response": []
				},
				{
					"name": "Uploads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    for(var i =0; i<jsonData.data.uploads.length ; i++){",
									"        if(jsonData.data.uploads[i].type == \"local\" || \"api\")",
									"            tests[\"uploaded type is local\"] = true;",
									"        else",
									"            tests[\"uploaded type is not local\"] = false;",
									"            ",
									"        if(jsonData.data.uploads[i].status == \"COMPLETE\" || \"FAILED\" || \"PENDING\")",
									"            tests[\"uploaded status is completed or failed\"] = true;",
									"        else",
									"            tests[\"uploaded status is not completed or failed\"] = false;",
									"    }",
									"    tests[\"page size is \"] = jsonData.data._pagination.pageSize === 25;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"     tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/uploads?page-number=0&page-size=25&order-by=createdTime,desc",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"uploads"
							],
							"query": [
								{
									"key": "page-number",
									"value": "0"
								},
								{
									"key": "page-size",
									"value": "25"
								},
								{
									"key": "order-by",
									"value": "createdTime,desc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Uploads with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,202]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 201){",
									"    assetsGloabelID =pm.globals.get('assetsGloabelID'); ",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The upload name is sampel.ext\"] = jsonData.data.assets[0].name === \"sampel4.ext\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is: \"+ jsonData.error.code] = false;",
									"    tests[\"The message is: \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"     tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"assets\": [\r\n    {\r\n      \"name\": \"sampel4.ext\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/assets"
					},
					"response": []
				},
				{
					"name": "Assets uploads with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful PATCH request\", function () {",
									"       pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The upload name is sampel.ext\"] = jsonData.data.assets[0].name === \"sampel.ext\";",
									"    tests[\"The upload name is sampel.ext\"] = jsonData.data.assets[0].status === \"PENDING\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"assets\": [\r\n    {\r\n      \"name\": \"sampel.ext\",\r\n      \"fileSize\": 12345,\r\n      \"assetPath\": \"/bucket/path/sampel.ext\",\r\n      \"extension\": \"pdf\",\r\n      \"mimeType\": \"application/pdf\",\r\n      \"status\": \"PENDING\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/assets"
					},
					"response": []
				},
				{
					"name": "Uploads to assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6314ddef-7fc8-4b6f-8484-e5967a0631fc",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    for(var i =0; i<jsonData.data.assets.length ; i++){",
									"        tests[\"contentType is \"+jsonData.data.assets[i].contentType] = jsonData.data.assets[i].contentType === \"document\";",
									"        tests[\"contentType is \"+jsonData.data.assets[i].mimeType] = jsonData.data.assets[i].mimeType === \"application/pdf\";",
									"        tests[\"contentType is \"+jsonData.data.assets[i].status] = jsonData.data.assets[i].status === \"PENDING\";",
									"    }",
									"    tests[\"The to total count is\"] = jsonData.data._pagination.totalCount === jsonData.data.assets.length;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/assets"
					},
					"response": []
				},
				{
					"name": "ProductMetaFiles by upload id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6314ddef-7fc8-4b6f-8484-e5967a0631fc",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"   pm.test(\"Content-Type is present\", function () {",
									"        pm.response.to.have.header(\"Content-Type\");",
									"    });",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metaConfig\": {\r\n    \"path\": \"s3/path\",\r\n    \"transactionType\": \"update\"\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/productMetaFiles"
					},
					"response": []
				},
				{
					"name": "Products by upload id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6314ddef-7fc8-4b6f-8484-e5967a0631fc",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The to total count is\"] = jsonData.data._pagination.totalCount === jsonData.data.products.length;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/products"
					},
					"response": []
				},
				{
					"name": "Uploads  with asset Id and uploadAssetId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"     tests[\"The response code is 401\"] = true;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"asset\": {\r\n    \"status\": \"PENDING\"\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/uploads/{{IdGlobalValue}}/assets/{{assetsGloabelID}}"
					},
					"response": []
				},
				{
					"name": "PlannerUploader",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The upload name\"] = jsonData.data.planner.name === \"Contract Employee invoice sample.xlsx\";",
									"      tests[\"The upload active status\"] = jsonData.data.planner.isActive === true;",
									"   }",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "tenantId ",
									"value": "7",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/catalog/v1/plannerUploader?=",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"plannerUploader"
							],
							"query": [
								{
									"key": "",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "products with files",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201,200]);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else  if(pm.response.code == 403){",
									"    tests[\"The response code is 403\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								},
								{
									"key": "id",
									"value": "30",
									"type": "text"
								},
								{
									"key": "linkTypeCode ",
									"value": "wholeproduct",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/catalog/v1/products/30/files?",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"products",
								"30",
								"files"
							],
							"query": [
								{
									"key": "file",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ProcessContents",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful GET request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else  if(pm.response.code == 403){",
									"    tests[\"The response code is 403\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/processContents?productId=517",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"processContents"
							],
							"query": [
								{
									"key": "productId",
									"value": "517"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "ProductTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The first parentId of productTypes is matched \"] = jsonData.data.productTypes[0].parentId === 0;",
									"    tests[\"The  first name of productTypes is matched \"] = jsonData.data.productTypes[0].name === \"eBook\";",
									"    tests[\"The  first code of productTypes is matched \"] = jsonData.data.productTypes[0].code === \"ebook\";",
									"    tests[\"The  first description of productTypes is matched \"] = jsonData.data.productTypes[0].description === \"This is ebook type product\";",
									"    tests[\"The  first state of productTypes is matched \"] = jsonData.data.productTypes[0].isActive === true;",
									"    ",
									"    tests[\"The second  parentId of productTypes is matched \"] = jsonData.data.productTypes[1].parentId === 0;",
									"    tests[\"The second  name of productTypes is matched \"] = jsonData.data.productTypes[1].name === \"Course\";",
									"    tests[\"The second  code of productTypes is matched \"] = jsonData.data.productTypes[1].code === \"course\";",
									"    tests[\"The second  description of productTypes is matched \"] = jsonData.data.productTypes[1].description === \"This is course type product\";",
									"    tests[\"The second  state of productTypes is matched \"] = jsonData.data.productTypes[1].isActive === true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/productTypes"
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The productTypeId is matched \"] = jsonData.data.product.productTypeId === 1;",
									"    tests[\"The productType is matched \"] = jsonData.data.product.productTypeId === \"eBook\";",
									"    tests[\"The status is matched \"] = jsonData.data.product.status === \"InProgress\";",
									"    tests[\"The description is matched \"] = jsonData.data.product.description === \"epub Reader\";",
									"    ",
									"    pm.globals.set(\"IdGlobalValue\", jsonData.data.product.id);",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": {\r\n    \"parentId\": 0,\r\n    \"productTypeId\": 1,\r\n    \"name\": \"New Product Code Pink\",\r\n    \"code\": \"New Product Code Pink\",\r\n    \"description\": \"epub Reader\",\r\n    \"summary\": \"summary\",\r\n    \"publisher\": \"\",\r\n    \"availableAt\": \"2019-03-04T05:58:19.939Z\",\r\n    \"categories\": [\r\n    ],\r\n    \"assetLinks\": [\r\n      {\r\n        \"assetRevisionId\": 1,\r\n        \"linkTypeId\": 1,\r\n        \"name\": \"name\",\r\n        \"description\": \"description\"\r\n      }\r\n    ],\r\n    \"contributors\": [\r\n      {\r\n        \"contributorTypeId\": 1,\r\n        \"name\": \"name\"\r\n      }\r\n    ],\r\n    \"customMeta\": {\r\n      \"ISBNNumber\": \"9781681071992\",\r\n      \"sbu\": \"Blaze\",\r\n      \"refSeriesName\": \"name\",\r\n      \"bookTitle\": \"Title\"\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/products"
					},
					"response": []
				},
				{
					"name": "Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The productTypeId is matched \"] = jsonData.data.product.productTypeId === 1;",
									"    tests[\"The productType is matched \"] = jsonData.data.product.productTypeId === \"eBook\";",
									"    tests[\"The status is matched \"] = jsonData.data.product.status === \"InProgress\";",
									"    tests[\"The description is matched \"] = jsonData.data.product.description === \"epub Reader\";",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": {\r\n    \"productTypeId\": 2,\r\n    \"productType\": \"Course\",\r\n    \"name\": \"New Product Code White\",\r\n    \"code\": \"New Product Code White\",\r\n    \"description\": \"epub Reader\",\r\n    \"summary\": \"summary\",\r\n    \"publisher\": \"Impelsys\",\r\n    \"availableAt\": \"2019-03-04T05:58:19.939Z\",\r\n    \"categories\": [\r\n    \t{\r\n         \r\n            \"id\": 103,\r\n            \"name\": \"Art Smart1\",\r\n            \"code\": \"skillsArtSmart\",\r\n            \"parentId\": 90,\r\n            \"type\": \"skills\",\r\n            \"isActive\": true,\r\n            \"isDirect\": true\r\n                        \r\n      }\r\n    ],\r\n    \"assetLinks\": [\r\n      {\r\n        \"assetRevisionId\": 1,\r\n        \"linkTypeId\": 1,\r\n        \"name\": \"name\",\r\n        \"description\": \"description\"\r\n      }\r\n    ],\r\n    \"contributors\": [\r\n      {\r\n        \"contributorTypeId\": 1,\r\n        \"name\": \"name\"\r\n      }\r\n    ],\r\n    \"customMeta\": {\r\n      \"ISBNNumber\": \"9781681071992\",\r\n      \"sbu\": \"Blaze\",\r\n      \"refSeriesName\": \"name\",\r\n      \"bookTitle\": \"Title\"\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/products"
					},
					"response": []
				},
				{
					"name": "Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The products page count\"] = jsonData.data._pagination.pageSize === jsonData.data.products.length;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/products?page-number=1&page-size=500&order-by=createdTime,asc",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"products"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "order-by",
									"value": "createdTime,asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Product by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The productTypeId is matched \"] = jsonData.data.product.productTypeId === 1;",
									"    tests[\"The productType is matched \"] = jsonData.data.product.productTypeId === \"eBook\";",
									"    tests[\"The status is matched \"] = jsonData.data.product.status === \"InProgress\";",
									"    tests[\"The description is matched \"] = jsonData.data.product.description === \"epub Reader\";",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": {\r\n  \t   \"productId\": 224,\r\n                \"parentId\": 0,\r\n                \"tenantId\": 2,\r\n                \"productTypeId\": 1,\r\n                \"productType\": \"eBook\",\r\n                \"code\": \"4564564564562\",\r\n                \"name\": \"Cowboy Bheem\",\r\n                \"url\": \"cowboy-bheemnull\",\r\n                \"description\": \"\",\r\n                \"summary\": \"Summary\",\r\n                \"previewPath\": \"https://d2vzgwvj3zlftn.cloudfront.net/stage/2/f71ba85a687e358b6aa49471c7bf4626/preview.jpg?d={width}x{height}\",\r\n                \"assetsCount\": 2,\r\n                \"publisher\": null,\r\n                \"isActive\": true,\r\n                \"isPublished\": false,\r\n                \"isDeleted\": false,\r\n                \"isExternalPublished\": null,\r\n    \"categories\": [\r\n      {\r\n        \"code\": \"category1\",\r\n        \"name\": \"Category 1\",\r\n        \"isDirect\": true\r\n      }\r\n    ],\r\n    \"assetLinks\": [\r\n      {\r\n        \"assetRevisionId\": 1,\r\n        \"linkTypeId\": 1,\r\n        \"name\": \"name\",\r\n        \"description\": \"description\"\r\n      }\r\n    ],\r\n    \"contributors\": [\r\n      {\r\n        \"contributorTypeCode\": \"Author\",\r\n        \"name\": \"name\"\r\n      }\r\n    ],\r\n    \"customMeta\": {\r\n      \"ISBNNumber\": \"9781681071992\",\r\n      \"sbu\": \"Blaze\",\r\n      \"refSeriesName\": \"name\",\r\n      \"bookTitle\": \"Title\"\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/products/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "products meta with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/products/49?meta=productType",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"products",
								"49"
							],
							"query": [
								{
									"key": "meta",
									"value": "productType"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "contributorTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"var name = [\"Created By\",\"Designed By\",\"Edited By\",\"Revised By\",\"Instructor\",\"Author\",\"Other\",\"Editor\",\"Illustrator\",\"Music & Sound\"];",
									"var code = [\"CreatedBy\",\"DesignedBy\",\"EditedBy\",\"RevisedBy\",\"Instructor\",\"Author\",\"Other\",\"Editor\",\"Illustrator\",\"Music & Sound\"];",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    for (var i =0; i<name.length-1;i++) {",
									"        result = jsonData.data.contributorTypes[i].name;",
									"        if (name[i] === result)",
									"            tests[i + \" name value is mached \"+ jsonData.data.contributorTypes[i].name] = true;",
									"        else",
									"            tests[i + \" name value is not mached\"] = false;",
									"",
									"    }",
									"for (var i =0; i<code.length-1;i++) {",
									"        result = jsonData.data.contributorTypes[i].code;",
									"        if (code[i] === result)",
									"            tests[i + \" code value is mached \"+ jsonData.data.contributorTypes[i].code] = true;",
									"        else",
									"            tests[i + \" code value is not mached\"] = false;",
									"",
									"    }    ",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/contributorTypes"
					},
					"response": []
				},
				{
					"name": "contributors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/contributors?name=Instructor",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"contributors"
							],
							"query": [
								{
									"key": "name",
									"value": "Instructor"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "productAssetLinks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productAssetLinks\": [\r\n    {\r\n      \"productId\": 817,\r\n      \"assetRevisionId\": 1,\r\n      \"linkTypeId\": 1,\r\n      \"name\": \"name\",\r\n      \"description\": \"description\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/productAssetLinks"
					},
					"response": []
				},
				{
					"name": "products contentUrl with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"",
									"            pm.expect(jsonData.data.contentUrl.hasOwnProperty(\"online\")).to.equal(true);",
									"            pm.expect(jsonData.data.contentUrl.hasOwnProperty(\"assetRevisionId\")).to.equal(true);",
									"            pm.expect(jsonData.data.contentUrl.hasOwnProperty(\"contentType\")).to.equal(true);",
									"            pm.expect(jsonData.data.contentUrl.hasOwnProperty(\"isResponsive\")).to.equal(true);",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/products/809/contentUrl"
					},
					"response": []
				},
				{
					"name": "subscriptionContentUrl with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/products/13589/subscriptionContentUrl"
					},
					"response": []
				},
				{
					"name": "launcher with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/products/809/launcher"
					},
					"response": []
				},
				{
					"name": "tvContentUrl with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/products/555/tvContentUrl"
					},
					"response": []
				},
				{
					"name": "reviewContentUrl with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/products/2/reviewContentUrl"
					},
					"response": []
				},
				{
					"name": "productStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"product\": {\r\n    \"productId\": 21,\r\n    \"startAt\": \"2019-03-06T05:17:47.140Z\",\r\n    \"endAt\": \"2019-03-06T05:17:47.140Z\",\r\n    \"status\": \"IN_PROGRESS\",\r\n    \"result\": \"PASS\",\r\n    \"lastAttempt\": 1,\r\n    \"readPercentage\": 10\r\n  },\r\n  \"lmsCommit\": {\r\n    \"scoInstanceId\": 0,\r\n    \"scormScoId\": 0,\r\n    \"readPercentage\": \"10\",\r\n    \"data\": {\r\n      \"cmi.entry\": \"true\",\r\n      \"cmi.completion_status\": \"completed\",\r\n      \"cmi.success_status\": \"passed\",\r\n      \"cmi.exit\": \"resume\",\r\n      \"cmi.score.min\": \"0\",\r\n      \"cmi.score.raw\": \"85\",\r\n      \"cmi.session_time\": \"00:30:34.34\",\r\n      \"cmi.score.max\": \"100\",\r\n      \"cmi.core.lesson_status\": \"completed\",\r\n      \"currentData\": {\r\n        \"completedPages\": [\r\n          \"1\",\r\n          \"2\",\r\n          \"3\",\r\n          \"4\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/productStatus"
					},
					"response": []
				},
				{
					"name": "readHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/readHistory?userId=2722",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"readHistory"
							],
							"query": [
								{
									"key": "userId",
									"value": "2722"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "popularProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//events=pageView/bookmarkAdd/bookOpen",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/popularProducts?events=bookmarkAdd&startDate=2018-08-03",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"popularProducts"
							],
							"query": [
								{
									"key": "events",
									"value": "bookmarkAdd"
								},
								{
									"key": "startDate",
									"value": "2018-08-03"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "dynamicProductStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//events=pageView/bookmarkAdd/bookOpen",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/dynamicProductStatus?productIds=5079&instructorData=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"dynamicProductStatus"
							],
							"query": [
								{
									"key": "productIds",
									"value": "5079"
								},
								{
									"key": "instructorData",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assets",
			"item": [
				{
					"name": "assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/assets?page-number=0&page-size=10&order-by=createdTime,asc",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"assets"
							],
							"query": [
								{
									"key": "page-number",
									"value": "0"
								},
								{
									"key": "page-size",
									"value": "10"
								},
								{
									"key": "order-by",
									"value": "createdTime,asc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "virtualAssets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"assets\": [\r\n    {\r\n      \"name\": \"9781681071993_frontcover_java\",\r\n      \"contentTypeCode\": \"youtubeVideo\",\r\n      \"assetPath\": \"https://www.youtube.com/watch?v=HUpIoF_conA\",\r\n      \"previewPath\": \"https://img.youtube.com/vi/HUpIoF_conA/default.jpg\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/assets/12345"
					},
					"response": []
				},
				{
					"name": "assets by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assets/12345"
					},
					"response": []
				},
				{
					"name": "assets by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"asset\": {\r\n    \"name\": \"us_mh010_launcher_html_IMPELSYS.Zip\",\r\n    \"isActive\": \"true\",\r\n    \"isDeleted\": \"true\"\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/assets/12345"
					},
					"response": []
				},
				{
					"name": "assets assetRevisionId meta",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/assets/2?meta=processStatus",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"assets",
								"2"
							],
							"query": [
								{
									"key": "meta",
									"value": "processStatus"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assets assetRevisionId linkTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assets/2/linkTypes"
					},
					"response": []
				},
				{
					"name": "assets assetRevisionId products",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  tests[\"The to total count is\"] = jsonData.data.products.length === 0;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assets/2/products"
					},
					"response": []
				},
				{
					"name": "searchAssets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/searchAssets"
					},
					"response": []
				},
				{
					"name": "assetUploader",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": "{{url}}/catalog/v1/assetUploader"
					},
					"response": []
				}
			]
		},
		{
			"name": "Process",
			"item": [
				{
					"name": "processCallback",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    // tests[\"The upload type is local\"] = jsonData.data.upload.type === \"local\";",
									"    // tests[\"The upload status is Pending\"] = jsonData.data.upload.status === \"PENDING\";",
									"    // tests[\"The upload tmpUploadPath contain \" + \"phoenix-contents-temp-dev/qa\"] = jsonData.data.upload.tmpUploadPath === \"phoenix-contents-temp-dev/qa/1/\"+jsonData.data.upload.id;",
									"    // tests[\"The upload name is sampel.ext\"] = jsonData.data.upload.assets[0].name === \"sampel.ext\";",
									"   ",
									"    // pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);",
									"    // pm.globals.set(\"assetsGloabelID\", jsonData.data.upload.assets[0].id);",
									"    // pm.globals.set(\"assetIdGlobel\", jsonData.data.upload.assets[0].assetId);",
									"    // pm.globals.set(\"assetRevisionId\", jsonData.data.upload.assets[0].assetRevisionId);",
									"  ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Message\": {\r\n    \"status\": \"COMPLETE\",\r\n    \"errorCode\": \"error-code\",\r\n    \"errorMessage\": \"error-message\",\r\n    \"type\": \"pdf-to-xod\",\r\n    \"inputLocation\": \"input/location\",\r\n    \"outputLocation\": \"output/location\",\r\n    \"meta\": {\r\n      \"encryptionPassword\": \"secret\",\r\n      \"priority\": 1,\r\n      \"assetRevisionId\": 2,\r\n      \"assetDeliveryId\": 3,\r\n      \"tenantId\": 1\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/processCallback"
					},
					"response": []
				}
			]
		},
		{
			"name": "Subscriptions",
			"item": [
				{
					"name": "SubscriptionProductStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/subscriptionProductStatus"
					},
					"response": []
				},
				{
					"name": "institutionSubscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/institutionSubscriptions"
					},
					"response": []
				},
				{
					"name": "Subscriptions product to institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 201){",
									"     pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.subscriptions.length;i++){",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"productId\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"accessType\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"unlimited\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"startAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"endAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"publisher\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"previewPath\")).to.equal(true);",
									"             pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"status\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"availableAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"isRenew\")).to.equal(true);",
									"        }",
									"     });",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptions\": [\r\n    {\r\n      \"productId\": 460,\r\n      \"startAt\": \"2019-07-12T11:43:40.400Z\",\r\n      \"endAt\": \"2019-08-12T11:43:40.400Z\",\r\n      \"accessType\": \"OPEN_ACCESS\",\r\n      \"unlimited\": true,\r\n      \"isRenew\": true,\r\n      \"status\": \"active\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/institutions/9113/subscriptions"
					},
					"response": []
				},
				{
					"name": "Subscriptions product to institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful Patch request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.subscriptions.length;i++){",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"productId\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"accessType\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"unlimited\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"startAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"endAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"publisher\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"previewPath\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"status\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"availableAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"isRenew\")).to.equal(true);",
									"        }",
									"     });",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"subscriptions\": [\r\n    {\r\n      \"productId\": 460,\r\n      \"startAt\": \"2019-07-12T11:43:40.400Z\",\r\n      \"endAt\": \"2019-07-12T11:43:40.400Z\",\r\n      \"accessType\": \"OPEN_ACCESS\",\r\n      \"unlimited\": true,\r\n      \"isRenew\": true,\r\n      \"status\": \"near_to_expiry\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/institutions/9113/subscriptions"
					},
					"response": []
				},
				{
					"name": "Subscriptions product to institution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful Patch request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     pm.test(\"Verify data as expected\", function () {",
									"        for(var i=0;i<jsonData.data.subscriptions.length;i++){",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"institutionId\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"productId\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"name\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"code\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"productType\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"accessType\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"isActive\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"unlimited\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"startAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"endAt\")).to.equal(true);",
									"            pm.expect(jsonData.data.subscriptions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"        }",
									"     });",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/institutions/9113/subscriptions"
					},
					"response": []
				},
				{
					"name": "packages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful Patch request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     tests[\"The to total count is\"] = jsonData.data.packages.length === 0;",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/packages"
					},
					"response": []
				},
				{
					"name": "packages by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful Patch request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"     tests[\"The to total count is\"] = jsonData.data.packages.length === 0;",
									"    ",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/packages/2"
					},
					"response": []
				},
				{
					"name": "userSubscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/userSubscriptions"
					},
					"response": []
				},
				{
					"name": "sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/sessions?page-number=1&page-size=0",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"sessions"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/sessions/3553"
					},
					"response": []
				},
				{
					"name": "sessionSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/sessionSummary"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reports",
			"item": [
				{
					"name": "userCourseSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"     tests[\"The user Course Summary1 \"] = jsonData.data.userCourseSummary.sections[0].name === \"IN_PROGRESS\";",
									"      tests[\"The user Course Summary2 \"] = jsonData.data.userCourseSummary.sections[1].name === \"COMPLETE\";",
									"       tests[\"The user Course Summary3 \"] = jsonData.data.userCourseSummary.sections[2].name === \"PENDING\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/userCourseSummary"
					},
					"response": []
				},
				{
					"name": "overallCourseSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The overallCourseSummary1 \"] = jsonData.data.overallCourseSummary.coursesAssigned === 0;",
									"      tests[\"The overallCourseSummary2 \"] = jsonData.data.overallCourseSummary.coursesCompleted === 0;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/overallCourseSummary"
					},
					"response": []
				},
				{
					"name": "userAssignmentStatusSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The user Course Summary1 \"] = jsonData.data.userAssignmentStatusSummary.sections[0].name === \"IN_PROGRESS\";",
									"      tests[\"The user Course Summary2 \"] = jsonData.data.userAssignmentStatusSummary.sections[1].name === \"COMPLETE\";",
									"       tests[\"The user Course Summary3 \"] = jsonData.data.userAssignmentStatusSummary.sections[2].name === \"UPCOMING\";",
									"        tests[\"The user Course Summary4 \"] = jsonData.data.userAssignmentStatusSummary.sections[3].name === \"YET_TO_START\";",
									"         tests[\"The user Course Summary5 \"] = jsonData.data.userAssignmentStatusSummary.sections[4].name === \"OVERDUE\";",
									"          tests[\"The sectionName \"] = jsonData.data.userAssignmentStatusSummary.sectionName === \"STATUS\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/userAssignmentStatusSummary"
					},
					"response": []
				},
				{
					"name": "assignmentStatusSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The assignmentStatusSummary1 \"] = jsonData.data.assignmentStatusSummary.sections[0].name === \"COMPLETE\";",
									"      tests[\"The assignmentStatusSummary2 \"] = jsonData.data.assignmentStatusSummary.sections[1].name === \"IN_COMPLETE\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assignmentStatusSummary"
					},
					"response": []
				},
				{
					"name": "assignmentSummaryByUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"     for(var i=0 ; i<jsonData.data.users.length; i++){",
									"        tests[\"The status \"] = jsonData.data.users[i].assignments[0].status === \"IN_COMPLETE\";",
									"     }",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assignmentSummaryByUser"
					},
					"response": []
				},
				{
					"name": "assignmentSummaryByProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    ",
									"     for(var i=0 ; i<jsonData.data.products.length; i++){",
									"        tests[\"The products status\"] = jsonData.data.products[i].assignments[0].status === \"IN_COMPLETE\";",
									"     }",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assignmentSummaryByProduct"
					},
					"response": []
				},
				{
					"name": "assignmentDetailsByProduct",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assignmentDetailsByProduct"
					},
					"response": []
				},
				{
					"name": "users assignments by user Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/users/3557/assignments"
					},
					"response": []
				},
				{
					"name": "users assignments :export by user Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/users/3557/assignments:export"
					},
					"response": []
				},
				{
					"name": "users assignmentDetails:export by user Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Successful POST request\", function () {",
									"//   pm.response.to.have.status(200);",
									"// });",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 400){",
									"//     tests[\"The response code is 400\"] = false;",
									"//      tests[\"The error is \"+ jsonData.error.code] = false;",
									"//       tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//      tests[\"The error is \"+jsonData.error.code] = false;",
									"//       tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/users/3557/assignmentDetails:export?assignmentId=36035",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"users",
								"3557",
								"assignmentDetails:export"
							],
							"query": [
								{
									"key": "assignmentId",
									"value": "36035"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userAssignments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/userAssignments?page-number=1&page-size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"userAssignments"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assignmentReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/assignmentReports?productId=594",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"assignmentReports"
							],
							"query": [
								{
									"key": "productId",
									"value": "594"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assignments",
			"item": [
				{
					"name": "assignmentMetaValues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/assignmentMetaValues?meta=FAILED",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"assignmentMetaValues"
							],
							"query": [
								{
									"key": "meta",
									"value": "FAILED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "assignment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/assignments/7660"
					},
					"response": []
				}
			]
		},
		{
			"name": "MetaSchemas",
			"item": [
				{
					"name": "productMetaSchemas by productTypeCode",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"if(pm.response.code == 200){",
									"  pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/productMetaSchemas/course"
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/categories"
					},
					"response": []
				},
				{
					"name": "categories of subCategories with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/categories/100/subCategories"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sites",
			"item": [
				{
					"name": "siteCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/siteCategories"
					},
					"response": []
				},
				{
					"name": "banners",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/banners"
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "batchProductIndex",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/batchProductIndex"
					},
					"response": []
				},
				{
					"name": "batchUploadDimensions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/batchUploadDimensions"
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/report/v1/users"
					},
					"response": []
				}
			]
		},
		{
			"name": "Collection",
			"item": [
				{
					"name": "tenantSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productIds\": [\r\n    100\r\n  ]\r\n}"
						},
						"url": "{{url}}/catalog/v1/collections/163492/products"
					},
					"response": []
				}
			]
		},
		{
			"name": "Product V2",
			"item": [
				{
					"name": "productStatus",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    for(var i= 0; i<jsonData.data.products.length; i++){",
									"         tests[\"The productType \"+ jsonData.data.products[i].id] = jsonData.data.products[i].productType === \"course\";",
									"         tests[\"The courseStatus \"+ jsonData.data.products[i].id + \" \" + jsonData.data.products[i].status] = jsonData.data.products[i].status === \"OVERDUE\" ||\"PENDING\";",
									"    }",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v2/productStatus?page-number=1&page-size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v2",
								"productStatus"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadStatus by Product Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "231b2fcd-245b-499a-806b-776d4411a2fb",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The productTypeId is matched \"] = jsonData.data.product.productTypeId === 1;",
									"    tests[\"The productType is matched \"] = jsonData.data.product.productTypeId === \"eBook\";",
									"    tests[\"The status is matched \"] = jsonData.data.product.status === \"InProgress\";",
									"    tests[\"The description is matched \"] = jsonData.data.product.description === \"epub Reader\";",
									"}",
									"else  if(pm.response.code == 207){",
									"    tests[\"The response code is 207\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"INVALID_ARGUMENT\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Some fields are wrong\";",
									"}",
									"else  if(pm.response.code == 409){",
									"    tests[\"The response code is 409\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"CONFLICT\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productReadStatus\": {\r\n    \"productId\": 517,\r\n    \"userId\": 0,\r\n    \"startAt\": \"2019-03-08T07:23:48.514Z\",\r\n    \"endAt\": \"2019-03-08T07:23:48.514Z\",\r\n    \"status\": true,\r\n    \"result\": \"pass\",\r\n    \"lastAttempt\": 1,\r\n    \"readPercentage\": 0\r\n  }\r\n}"
						},
						"url": "{{url}}/catalog/v1/products/517/readStatus"
					},
					"response": []
				},
				{
					"name": "Product id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The products id\"] = jsonData.data.product.id === 517;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/products/570"
					},
					"response": []
				},
				{
					"name": "Product  course Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The products courseStatus \"] = jsonData.data.courseDetails.courseStatus === \"PENDING\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/products/517/courseDetails"
					},
					"response": []
				},
				{
					"name": "Product  launcher",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 201\"] = true;",
									"    tests[\"The products courseStatus \"] = jsonData.data.courseDetails.courseStatus === \"PENDING\";",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/products/12/launcher"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sites V2",
			"item": [
				{
					"name": "homepageSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/homepageSettings"
					},
					"response": []
				},
				{
					"name": "homepageSections with section Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/homepageSections/2"
					},
					"response": []
				},
				{
					"name": "searchProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v1/searchProducts"
					},
					"response": []
				}
			]
		},
		{
			"name": "Report V2",
			"item": [
				{
					"name": "AssignmentReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v2/assignmentReports?productId=560",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v2",
								"assignmentReports"
							],
							"query": [
								{
									"key": "productId",
									"value": "560"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories V2",
			"item": [
				{
					"name": "categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/categories"
					},
					"response": []
				},
				{
					"name": "Products with categorie id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/catalog/v2/categories/119/products"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reader",
			"item": [
				{
					"name": "Readers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"      tests[\"The reader name1\"] = jsonData.data.readers[0].name === \"pdf reader\";",
									"      tests[\"The reader code\"] = jsonData.data.readers[0].code === \"pdf\";",
									"      tests[\"The reader name2\"] = jsonData.data.readers[1].name === \"epub reader\";",
									"      tests[\"The reader code2\"] = jsonData.data.readers[1].code === \"epub\";",
									"      tests[\"The reader name3\"] = jsonData.data.readers[2].name === \"scorm reader\";",
									"      tests[\"The reader code3\"] = jsonData.data.readers[2].code === \"scorm\";",
									"      tests[\"The reader name4\"] = jsonData.data.readers[3].name === \"icf reader\";",
									"      tests[\"The reader code4\"] = jsonData.data.readers[3].code === \"icf\";",
									"      tests[\"The reader name5\"] = jsonData.data.readers[4].name === \"icf reader\";",
									"      tests[\"The reader code5\"] = jsonData.data.readers[4].code === \"icfRtl\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/readers"
					},
					"response": []
				},
				{
					"name": "Readers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reader\": {\r\n    \"name\": \"ebook reader\",\r\n    \"code\": \"ebook\",\r\n    \"version\": \"1.2.0\",\r\n    \"format\": \"ebook format\"\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/readers"
					},
					"response": []
				},
				{
					"name": "ReaderVersions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 201\"] = true;",
									"       tests[\"The readerId \"] = jsonData.data.readerVersion.readerId === 7;",
									"       tests[\"The format \"] = jsonData.data.readerVersion.format === \"pdf\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerVersion\": {\r\n    \"readerId\": 7,\r\n    \"tenantId\": 1212,\r\n    \"format\": \"pdf\"\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/readerVersions"
					},
					"response": []
				},
				{
					"name": "Launches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerLaunch\": {\r\n    \"tenantId\": 100,\r\n    \"productId\": 200,\r\n    \"userId\": 200,\r\n    \"readerId\": 7,\r\n    \"subscriptionId\": 200,\r\n    \"assetId\": 200,\r\n    \"assetFormat\": \"pdf\",\r\n    \"assetUrl\": \"http://contetentreop.com/assets/abc\",\r\n    \"metadata\": {\r\n      \"X-Jwt-Token\": \"jwt token \",\r\n      \"coverartUrl\": \"/coverart/url\",\r\n      \"assignmentNumber\": 1,\r\n      \"minScore\": 0,\r\n      \"attemptLimit\": 1,\r\n      \"review\": false\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/launches"
					},
					"response": []
				},
				{
					"name": "launches with nounce",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"      tests[\"The reader name1\"] = jsonData.data.readers[0].name === \"pdf reader\";",
									"      tests[\"The reader code\"] = jsonData.data.readers[0].code === \"pdf\";",
									"      tests[\"The reader name2\"] = jsonData.data.readers[1].name === \"epub reader\";",
									"      tests[\"The reader code2\"] = jsonData.data.readers[1].code === \"epub\";",
									"      tests[\"The reader name3\"] = jsonData.data.readers[2].name === \"scorm reader\";",
									"      tests[\"The reader code3\"] = jsonData.data.readers[2].code === \"scorm\";",
									"      tests[\"The reader name4\"] = jsonData.data.readers[3].name === \"icf reader\";",
									"      tests[\"The reader code4\"] = jsonData.data.readers[3].code === \"icf\";",
									"      tests[\"The reader name5\"] = jsonData.data.readers[4].name === \"icf reader\";",
									"      tests[\"The reader code5\"] = jsonData.data.readers[4].code === \"icfRtl\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/launches/2"
					},
					"response": []
				},
				{
					"name": "LaunchConfigs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 201\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"launchTrack\": {\r\n    \"userId\": 100,\r\n    \"productId\": 200,\r\n    \"assetId\": 200,\r\n    \"assetFormat\": \"pdf\",\r\n    \"assetUrl\": \"http://asset/url\",\r\n    \"coverartUrl\": \"http://cover/art/url\",\r\n    \"metadata\": {\r\n      \"assignmentNumber\": 1,\r\n      \"review\": false,\r\n      \"X-Jwt-Token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\",\r\n      \"callbackUrl\": \"/callback/url\",\r\n      \"password\": \"secret\",\r\n      \"title\": \"title\",\r\n      \"minScore\": 50,\r\n      \"attemptLimit\": 5,\r\n      \"startAt\": \"2019-01-23T13:21:03+00:00\",\r\n      \"endAt\": \"2019-01-23T13:21:03+00:00\"\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/launchConfigs"
					},
					"response": []
				}
			]
		},
		{
			"name": "Scorms",
			"item": [
				{
					"name": "scormReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/reader/v1/scormReports?userId=2722&productId=822",
							"host": [
								"{{url}}"
							],
							"path": [
								"reader",
								"v1",
								"scormReports"
							],
							"query": [
								{
									"key": "userId",
									"value": "2722"
								},
								{
									"key": "productId",
									"value": "822"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reader Errors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerError\": {\r\n    \"data\": {},\r\n    \"errorCode\": \"string\",\r\n    \"errorDescription\": \"string\",\r\n    \"launchId\": \"string\",\r\n    \"productId\": 822,\r\n    \"readerId\": 0,\r\n    \"readerType\": \"string\",\r\n    \"readerVersion\": \"string\",\r\n    \"tenantId\": 0,\r\n    \"userId\": 0\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/readerErrors"
					},
					"response": []
				}
			]
		},
		{
			"name": "Personalization",
			"item": [
				{
					"name": "Notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/notes"
					},
					"response": []
				},
				{
					"name": "notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    pm.expect(jsonData.data.note.hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.note.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.note.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"note\": {\r\n    \"format\": \"pdf\",\r\n    \"title\": \"string\",\r\n    \"productId\": 823,\r\n    \"userId\": 2643,\r\n    \"pageNumber\": 0,\r\n    \"pageName\": \"string\",\r\n    \"version\": \"1.2\",\r\n     \"data\": {\r\n                    \"Id\": \"4a300d4f-ff8c-7462-982e-1dfcb9c8d60b\",\r\n                    \"width\": 31,\r\n                    \"apiKey\": 31524,\r\n                    \"bookId\": \"673\",\r\n                    \"format\": \"image\",\r\n                    \"height\": 31,\r\n                    \"pageNo\": 1,\r\n                    \"siteID\": \"700\",\r\n                    \"sortBy\": \"DESC\",\r\n                    \"userId\": \"1\",\r\n                    \"Subject\": \"Comment\",\r\n                    \"endCood\": 371.7449324324322,\r\n                    \"noteText\": \"kjkljllnnn,\",\r\n                    \"username\": \"dev-team\",\r\n                    \"usertype\": \"INSTITUTIONALPELOGIN\",\r\n                    \"colorCode\": \"rgba(255,255,0,1)\",\r\n                    \"sortField\": \"createdDate\",\r\n                    \"startCood\": 583.1638513513514,\r\n                    \"readerType\": \"image\",\r\n                    \"xCoordinate\": 583.1638513513514,\r\n                    \"yCoordinate\": 371.7449324324322,\r\n                    \"highlightColor\": \"rgba(255,255,0,1)\",\r\n                    \"intInstitutionId\": \"19\"\r\n                }\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/notes"
					},
					"response": []
				},
				{
					"name": "Notes by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      pm.expect(jsonData.data.note.hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.note.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/notes/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Notes by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"note\": {\r\n    \"format\": \"pdf\",\r\n    \"title\": \"Note 123\",\r\n    \"productId\": 824,\r\n    \"userId\": 2650,\r\n    \"pageNumber\": 0,\r\n    \"pageName\": \"string\",\r\n    \"version\": \"1.2\",\r\n    \"data\": {}\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/notes/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Notes by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/notes/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "bookmarks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.bookmark.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"bookmark\": {\r\n    \"format\": \"pdf\",\r\n    \"title\": \"Bookmark123\",\r\n    \"productId\": 823,\r\n    \"userId\": 2643,\r\n    \"pageNumber\": 10,\r\n    \"pageName\": \"string\",\r\n    \"version\": \"1.2\",\r\n    \"data\": {}\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/bookmarks"
					},
					"response": []
				},
				{
					"name": "bookmarks for Product Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"      tests[\"The bookmark first value \"] = jsonData.data.first === true;",
									"      tests[\"The bookmark size value \"] = jsonData.data.size === 5000;",
									"      ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/reader/v1/bookmarks?productId=824",
							"host": [
								"{{url}}"
							],
							"path": [
								"reader",
								"v1",
								"bookmarks"
							],
							"query": [
								{
									"key": "productId",
									"value": "824"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "bookmarks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"      tests[\"The bookmark id is matched\"] = jsonData.data.bookmark.id === 1;",
									"      tests[\"The bookmark type is matched \"] = jsonData.data.bookmark.type === \"bookmark\";",
									"      ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/bookmarks/1"
					},
					"response": []
				},
				{
					"name": "bookmarks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else  if(pm.response.code == 404){",
									"    tests[\"The response code is 404\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = \"NOT_FOUND\";",
									"    tests[\"The message is \"+jsonData.error.message] = \"Bookmark with id \\\"3\\\" not found\";",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/bookmarks/3"
					},
					"response": []
				},
				{
					"name": "Highlights",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.highlight.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"highlight\": {\r\n    \"format\": \"pdf\",\r\n    \"title\": \"string\",\r\n    \"productId\": 726,\r\n    \"userId\": 3721,\r\n    \"pageNumber\": 4,\r\n    \"pageName\": \"string\",\r\n    \"version\": \"1.2\",\r\n    \"data\": {}\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/reader/v1/highlights"
					},
					"response": []
				},
				{
					"name": "Highlights with tenant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/reader/v1/highlights?tenantId=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"reader",
								"v1",
								"highlights"
							],
							"query": [
								{
									"key": "tenantId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Highlights with highlight id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/highlights/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Highlight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/highlights/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Highlight",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"highlight\": {\r\n  \t\"tenantId\": 1,\r\n    \"format\": \"pdf\",\r\n    \"title\": \"string\",\r\n    \"productId\": 726,\r\n    \"userId\": 3721,\r\n    \"pageNumber\": 4,\r\n    \"pageName\": \"string\",\r\n    \"version\": \"1.2\",\r\n    \"data\": {}\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/highlights/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "lastReadPage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"15\",\r\n  \"tenantId\": \"10\",\r\n  \"productId\": \"200\",\r\n  \"userId\": \"200\",\r\n  \"format\": \"pdf\",\r\n  \"pageNumber\": \"45\",\r\n  \"pageUrl\": \"http://contetentreop.com/assets/abc\",\r\n  \"pageOpfId\": \"http://contetentreop.com/assets/abc\",\r\n  \"createdTime\": \"2019-03-12T07:42:06.039Z\",\r\n  \"modifiedTime\": \"2019-03-12T07:42:06.039Z\"\r\n}"
						},
						"url": "{{url}}/reader/v1/lastReadPage"
					},
					"response": []
				}
			]
		},
		{
			"name": "Reader Settings",
			"item": [
				{
					"name": "readerConfigs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									"//pm.globals.set(\"IdGlobalValue\", jsonData.data.readerConfig.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerConfig\": {\r\n    \"configGroupId\": 102,\r\n    \"readerId\": 11\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/readerConfigs"
					},
					"response": []
				},
				{
					"name": "readerSettings with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/readerSettings/6"
					},
					"response": []
				},
				{
					"name": "readerSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerGlobalSettings\": {\r\n    \"configGroupId\": 1,\r\n    \"settings\": {},\r\n    \"type\": \"string\"\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/readerSettings"
					},
					"response": []
				},
				{
					"name": "readerSettings with tenant id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"readerSettings\": {\r\n    \"configGroupId\": 1,\r\n    \"settings\": {},\r\n    \"type\": \"string\"\r\n  }\r\n}"
						},
						"url": "{{url}}/reader/v1/tenants/6/readerSettings"
					},
					"response": []
				},
				{
					"name": "readerSettings with tenant id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/reader/v1/tenants/1/readerSettings"
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\": {\r\n    \"label\": \"______ offers a view of occupational therapy relevant to Asian Pacific and\",\r\n    \"promptText\": \"______ offers a view of occupational therapy relevant to Asian Pacific and other collectivist cultures.\",\r\n    \"itemTypeId\": 1,\r\n    \"score\": \"10.0\",\r\n    \"identifier\": \"IDEN_8760986968\",\r\n    \"parentId\": null,\r\n    \"parentItemType\": \"\",\r\n    \"difficulty\": \"5\",\r\n    \"numberOfBlanks\": 0,\r\n    \"revision\": 1,\r\n    \"assets\": [\r\n      {\r\n        \"externalId\": 1313,\r\n        \"externalRevisionId\": 113,\r\n        \"embeddedResource\": \"<iframe src=\\\"https://www.youtube.com/watch?v=exhw3EWkDxQ\\\" />\"\r\n      }\r\n    ],\r\n    \"modelFeedback\": [\r\n      {\r\n        \"outcomeTypeId\": \"1\",\r\n        \"feedbackText\": \"A key development in this regard was the Kawa model which offered a different but culturally relevant view of occupational therapy through the lens of Asian Pacific and other collectivist cultures. The influence of international perspectives was also fostered through the emergence of international societies for occupational science.\"\r\n      }\r\n    ],\r\n    \"remediationLinks\": [\r\n      {\r\n        \"linkTypeId\": \"1\",\r\n        \"linkText1\": \"Willard & Spackman's Occupational Therapy, Twelfth Edition : A Contextual History of Occupational Therapy\",\r\n        \"linkText2\": \"http://ot.lwwhealthlibrary.com/content.aspx?sectionid=62345932&bookid=1109#90493938\",\r\n        \"linkText3\": \"AltText\"\r\n      }\r\n    ],\r\n    \"choiceInteraction\": {\r\n      \"promptText\": \"\",\r\n      \"isShuffle\": \"true\",\r\n      \"maxChoice\": 0,\r\n      \"minChoice\": 0,\r\n      \"itemScore\": 2,\r\n      \"isPartialScore\": false,\r\n      \"isNegativeScore\": false,\r\n      \"simpleChoices\": [\r\n        {\r\n          \"isFixed\": \"true\",\r\n          \"label\": \"Kawasaki Style\",\r\n          \"value\": \"\",\r\n          \"correct\": \"true\",\r\n          \"feedbackText\": \"This choice is correct since\",\r\n          \"score\": 2,\r\n          \"assets\": [\r\n            {\r\n              \"externalId\": 1313,\r\n              \"externalRevisionId\": 113,\r\n              \"embeddedResource\": \"<iframe src=\\\"https://www.youtube.com/watch?v=exhw3EWkDxQ\\\" />\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n    \"metadatas\": [\r\n      {\r\n        \"typeId\": \"1\",\r\n        \"id\": \"1\",\r\n        \"value\": \"Health\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/items"
					},
					"response": []
				},
				{
					"name": "Items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/items?typeId=1&page-number=2&page-size=2000",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"items"
							],
							"query": [
								{
									"key": "typeId",
									"value": "1"
								},
								{
									"key": "page-number",
									"value": "2"
								},
								{
									"key": "page-size",
									"value": "2000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/items/2785"
					},
					"response": []
				},
				{
					"name": "Items with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\":  {\r\n               \r\n                \"revisionId\": 7281,\r\n                \"typeId\": 7,\r\n                \"typeName\": \"Medical Case\",\r\n                \"identifier\": \"IDENT_fe581552382545044\",\r\n                \"statusId\": 4,\r\n                \"statusName\": \"AUTHORING\",\r\n                \"version\": 1,\r\n                \"label\": \"MDC With Asset 1\",\r\n                \"promptText\": \"MDC With Asset 1\",\r\n                \"childOrder\": null,\r\n                \"numberofVersions\": 1,\r\n                \"score\": 10,\r\n                \"sequence\": null,\r\n                \"isDeleted\": false,\r\n                \"isLinkToExam\": false,\r\n                \"remidiationlinkId\": null,\r\n                \"feedbackId\": null,\r\n                \"createdBy\": 1,\r\n                \"createdTime\": \"2019-03-12T09:22:25.000Z\",\r\n                \"updatedBy\": 1,\r\n                \"updatedTime\": \"2019-03-12T09:22:25.000Z\",\r\n                \"successMessage\": null,\r\n                \"childCount\": null,\r\n                \"isMetaDataAttached\": false,\r\n                \"isChild\": false\r\n            }\r\n}"
						},
						"url": "{{url}}/exam/v1/items/6862"
					},
					"response": []
				},
				{
					"name": "Items with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"      ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/items/6862?revisionId=7281",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"items",
								"6862"
							],
							"query": [
								{
									"key": "revisionId",
									"value": "7281"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "itemRevisions with Items  id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/items/6862/itemRevisions"
					},
					"response": []
				},
				{
					"name": "ItemTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/itemTypes?updateCache=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"itemTypes"
							],
							"query": [
								{
									"key": "updateCache",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "remediationLinkTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/remediationLinkTypes?updateCache=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"remediationLinkTypes"
							],
							"query": [
								{
									"key": "updateCache",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Metadatas",
			"item": [
				{
					"name": "Metadatas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"} else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.metadata.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metadata\": {\r\n    \"typeId\": \"1\",\r\n    \"name\": \"Tag 1\",\r\n    \"description\": \"Metadata tag 1\",\r\n    \"label\": \"Tage 1\",\r\n    \"isMandatory\": false,\r\n    \"isMultiSelect\": true,\r\n    \"metadataValues\": [\r\n      {\r\n        \"value\": \"List1\",\r\n        \"sequence\": 1\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/metadatas"
					},
					"response": []
				},
				{
					"name": "metadatas",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/metadatas?page-number=3&page-size=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"metadatas"
							],
							"query": [
								{
									"key": "page-number",
									"value": "3"
								},
								{
									"key": "page-size",
									"value": "500"
								},
								{
									"key": "typeId",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Metadata with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/metadatas/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Metadata with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"metadata\": {\r\n    \"id\": 6546,\r\n    \"typeId\": \"1\",\r\n    \"name\": \"Tag 1\",\r\n    \"description\": \"Metadata tag 1\",\r\n    \"label\": \"Tage 1\",\r\n    \"isMandatory\": false,\r\n    \"isMultiSelect\": true,\r\n    \"metadataValues\": [\r\n      {\r\n        \"id\": 1,\r\n        \"value\": \"List1\",\r\n        \"sequence\": 1\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/metadatas/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Items with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"       tests[\"The response data\"] = jsonData.data = \"successful operation\";",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/metadatas/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "metadataTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/metadataTypes"
					},
					"response": []
				}
			]
		},
		{
			"name": "Item Banks",
			"item": [
				{
					"name": "ItemBanks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"} else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.itemBank.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"itemBank\": {\r\n    \"label\": \"Independent Bank\",\r\n    \"description\": \"Anatomy related Item published year 2016\",\r\n    \"statusName\": \"Authoring\",\r\n    \"statusId\": \"4\",\r\n    \"items\": [\r\n      {\r\n        \"id\": 4836,\r\n        \"revisionId\": 5255,\r\n        \"identifier\": \"IDENT_1a141551088768450\",\r\n        \"typeName\": \"Multiple Choice\",\r\n        \"label\": \"Q having one MD\",\r\n        \"promptText\": \"Q having one MD\",\r\n        \"statusName\": \"AUTHORING\",\r\n        \"statusId\": \"4\",\r\n        \"revision\": 1\r\n      }\r\n    ],\r\n    \"metadatas\": [\r\n      {\r\n        \"typeId\": \"2\",\r\n        \"id\": \"169\",\r\n        \"value\": \"b2s28\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/itemBanks"
					},
					"response": []
				},
				{
					"name": "itemBanks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/itemBanks?page-number=3&page-size=100",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"itemBanks"
							],
							"query": [
								{
									"key": "description",
									"value": "'Anatomy'",
									"disabled": true
								},
								{
									"key": "page-number",
									"value": "3"
								},
								{
									"key": "page-size",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "itemBanks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/itemBanks/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "itemBanks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"itemBank\": {\r\n    \"name\": \"INDP Banka\",\r\n    \"description\": \"Anatomy related Item published year 2016\",\r\n    \"status\": \"Published\",\r\n    \"statusId\": \"4\",\r\n    \"items\": [\r\n      {\r\n        \"id\": 34324,\r\n        \"revisionId\": 1234,\r\n        \"identifier\": \"QA0001\",\r\n        \"typeName\": \"MultiChoice\",\r\n        \"label\": \"Item 1\",\r\n        \"promptText\": \"Item 1 Description\",\r\n        \"statusName\": \"Authoring\",\r\n        \"statusId\": \"4\",\r\n        \"revision\": 1\r\n      }\r\n    ],\r\n    \"metadatas\": [\r\n      {\r\n        \"typeId\": \"1\",\r\n        \"id\": \"1\",\r\n        \"value\": \"Health\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n"
						},
						"url": "{{url}}/exam/v1/itemBanks/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Publish itemBanks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"itemBank\": {\r\n    \"items\": [\r\n      {\r\n        \"id\": 34324\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/exam/v1/itemBanks/{{IdGlobalValue}}/itemBank:publish?publishAll=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"itemBanks",
								"{{IdGlobalValue}}",
								"itemBank:publish"
							],
							"query": [
								{
									"key": "publishAll",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Authorize itemBanks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"itemBank\": {\r\n    \"items\": [\r\n      {\r\n        \"id\": 34324\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/itemBanks/{{IdGlobalValue}}/itemBank:authorize"
					},
					"response": []
				},
				{
					"name": "itemBanks with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"       tests[\"The response data\"] = jsonData.data = \"successful operation\";",
									"      ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/itemBanks/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "Iteam Banks with upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"    ",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/itemBanks/27/uploads"
					},
					"response": []
				}
			]
		},
		{
			"name": "Uploads",
			"item": [
				{
					"name": "ftpUploads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"} ",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} ",
									"else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"upload\": {\r\n    \"settings\": {\r\n      \"url\": \"phoenix-api-qa.ipublishcentral.com/exam/ftp\",\r\n      \"folder\": \"ftpUpload\",\r\n      \"user\": \"examEngine\",\r\n      \"password\": \"*****\"\r\n    }\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/exam/v1/ftpUploads?resourceType=item&hasItemBank=true&isNewUpload=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"ftpUploads"
							],
							"query": [
								{
									"key": "resourceType",
									"value": "item"
								},
								{
									"key": "hasItemBank",
									"value": "true"
								},
								{
									"key": "isNewUpload",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "uploads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"} ",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} ",
									"else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.upload.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "resourceFile",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": {
							"raw": "{{url}}/exam/v1/uploads?hasItemBank=true&resourceType=item",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"uploads"
							],
							"query": [
								{
									"key": "hasItemBank",
									"value": "true"
								},
								{
									"key": "resourceType",
									"value": "item"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "uploads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The total records \"] = jsonData.data.uploads.length === jsonData.data.pagination.pageSize;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/uploads"
					},
					"response": []
				},
				{
					"name": "uploads with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The total records \"] = jsonData.data.uploads.length === jsonData.data.pagination.pageSize;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "resourceFile ",
									"type": "file",
									"src": ""
								}
							]
						},
						"url": "{{url}}/exam/v1/uploads/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "uploadProcessor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/uploadProcessor"
					},
					"response": []
				},
				{
					"name": "uploadId errors:export",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/uploads/{{IdGlobalValue}}/errors:export"
					},
					"response": []
				},
				{
					"name": "uploadId items",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/uploads/920/items"
					},
					"response": []
				},
				{
					"name": "uploads items:authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"upload\": {\r\n    \"items\": [\r\n      {\r\n        \"id\": 2847\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/exam/v1/uploads/937/items:authorize?authorizeAll=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"uploads",
								"937",
								"items:authorize"
							],
							"query": [
								{
									"key": "authorizeAll",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "uploads items:publish",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"upload\": {\r\n    \"items\": [\r\n      {\r\n        \"id\": 2847\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/exam/v1/uploads/920/items:publish?publishAll=true",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"uploads",
								"920",
								"items:publish"
							],
							"query": [
								{
									"key": "publishAll",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "uploads items:cancel",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/uploads/{{IdGlobalValue}}/items:cancel"
					},
					"response": []
				},
				{
					"name": "itemTemplateTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/itemTemplateTypes"
					},
					"response": []
				},
				{
					"name": "downloadTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/downloadTemplates"
					},
					"response": []
				}
			]
		},
		{
			"name": "Export",
			"item": [
				{
					"name": "exports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The total records \"] = jsonData.data.uploads.length === jsonData.data.pagination.pageSize;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"export\": {\r\n    \"identifier\": \"Fiter by identifier field\",\r\n    \"itemTypeId\": 4,\r\n    \"label\": \"Fiter by label field\",\r\n    \"statusId\":6,\r\n    \"order-by\": \"Order by field eg: label,desc\",\r\n    \"query\": \"Query accross all the data\",\r\n    \"metadatas\":  [\r\n      {\r\n        \"value\": \"List1\",\r\n        \"sequence\": 1\r\n      }\r\n    ],\r\n    \"itemBankId\": \"123\",\r\n    \"itemIds\": [\r\n      123\r\n    ]\r\n  }\r\n}"
						},
						"url": {
							"raw": "{{url}}/exam/v1/exports?resourceType=item",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"exports"
							],
							"query": [
								{
									"key": "resourceType",
									"value": "item"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "exports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The total records \"] = jsonData.data.exports.length === jsonData.data.pagination.pageSize;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/exports"
					},
					"response": []
				},
				{
					"name": "exports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"     tests[\"The total records \"] = jsonData.data.uploads.length === jsonData.data.pagination.pageSize;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"export\": {\r\n    \"code\": \"EXPORT__876786876\"\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/exports/20"
					},
					"response": []
				}
			]
		},
		{
			"name": "Resource",
			"item": [
				{
					"name": "statusTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/statusTypes"
					},
					"response": []
				},
				{
					"name": "resourceTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/resourceTypes"
					},
					"response": []
				}
			]
		},
		{
			"name": "Tests",
			"item": [
				{
					"name": "tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"test\": {\r\n    \"label\": \"Certification exam 2018-2019\",\r\n    \"description\": \"Certification exam 2018-2019\",\r\n    \"typeId\": 2,\r\n    \"typeName\": \"Certification\",\r\n    \"isDynamic\": true,\r\n    \"noOfQuestions\": \"100\",\r\n    \"noOfStudentsEnrolled\": 100,\r\n    \"navigationType\": 1,\r\n    \"questionTime\": 60,\r\n    \"quizTime\": 120,\r\n    \"randomizeAnswer\": true,\r\n    \"randomizeQuestion\": true,\r\n    \"statusName\": \"Authoring\",\r\n    \"answerDisplayLevel\": [\r\n      {\r\n        \"name\": \"evaluate\"\r\n      }\r\n    ],\r\n    \"maxAttempts\": 3,\r\n    \"course\": \"ACLS101\",\r\n    \"displayResultOnItemSubmit\": false,\r\n    \"statusId\": \"1\",\r\n    \"passingScorePercentage\": \"50\",\r\n    \"metadatas\": [\r\n      {\r\n        \"typeId\": \"1\",\r\n        \"id\": \"1\",\r\n        \"value\": \"Health\"\r\n      }\r\n    ],\r\n    \"testItemBanks\": [\r\n      {\r\n        \"id\": 711,\r\n        \"name\": \"Independent Bank\",\r\n        \"description\": \"Anatomy related Item published year 2016\",\r\n        \"status\": \"Authoring\",\r\n        \"itemCount\": 1,\r\n        \"createdBy\": 0,\r\n        \"updatedBy\": 0,\r\n        \"createdTime\": \"2019-03-13T09:34:53.458Z\",\r\n        \"updatedTime\": \"2019-03-13T09:34:53.458Z\"\r\n      }\r\n    ],\r\n    \"testItems\": [\r\n      {\r\n        \"id\": 2807,\r\n        \"weightagePercentage\": 0,\r\n        \"metadatas\": [\r\n          {\r\n            \"name\": \"SkillsSession\",\r\n            \"value\": \"PALS Skills Session\"\r\n          }\r\n        ],\r\n        \"itemTypeId\": \"1\"\r\n      }\r\n    ],\r\n    \"rules\": [],\r\n    \"assets\": [\r\n      {\r\n        \"externalId\": 1313,\r\n        \"externalRevisionId\": 113,\r\n        \"embeddedResource\": \"<iframe src=\\\"https://www.youtube.com/watch?v=exhw3EWkDxQ\\\" />\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/tests"
					},
					"response": []
				},
				{
					"name": "tests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/tests?id=1&page-number=1&page-size=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"tests"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								},
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "tests with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/tests/2762"
					},
					"response": []
				},
				{
					"name": "testRevisions with test id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/tests/6014/testRevisions"
					},
					"response": []
				},
				{
					"name": "testTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testTypes"
					},
					"response": []
				}
			]
		},
		{
			"name": "Feedbacks",
			"item": [
				{
					"name": "feedbacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/feedbacks"
					},
					"response": []
				},
				{
					"name": "feedbacks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"feedback\": {\r\n    \"resourceTypeId\": \"3\",\r\n    \"resourceId\": \"207\",\r\n      \"subResourceTypeId\": 1,\r\n                \"subResourceId\": 188,\r\n    \"feedbackText\": \"Exam score should be more than 120\",\r\n    \"rating\": 5,\r\n    \"isPublic\": \"false\"\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/feedbacks"
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Sessions",
			"item": [
				{
					"name": "testSessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"id\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedBy\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"testRevisionId\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"label\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"startAt\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"endAt\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"id\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"totalAttempted\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"isPass\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"status\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"userId\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"totalScorePercentage\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"totalCorretItemsPercentage\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"totalCorrect\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"totalScore\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"updatedBy\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.users[0].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsEnrolledCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsCompletedCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsInprogressCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsYetToStartCount\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"status\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"activeStatus\")).to.equal(true);",
									"   pm.expect(jsonData.data.testSession.hasOwnProperty(\"testLabel\")).to.equal(true);",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.testSession.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"testSession\": {\r\n    \"testRevisionId\": 698,\r\n    \"label\": \"Exam label1 2019\",\r\n    \"maxAttemptsCount\": 3,\r\n    \"startAt\": \"2018-02-07T04:55:41.021Z\",\r\n    \"endAt\": \"2119-03-04T23:59:00.000Z\",\r\n    \"users\": [\r\n      {\r\n        \"userId\": 74574,\r\n        \"maxAttemptsCount\": 4\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/testSessions"
					},
					"response": []
				},
				{
					"name": "testSessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									" pm.test(\"The data as expected\", function() {   ",
									"   for(var i=0;i<jsonData.data.testSessions.length;i++){",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"id\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"createdBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"createdTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"updatedBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"testRevisionId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"label\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"startAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"endAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"studentsEnrolledCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"studentsCompletedCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"studentsInprogressCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"studentsYetToStartCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"tenantId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"status\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"activeStatus\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSessions[i].hasOwnProperty(\"testLabel\")).to.equal(true);",
									"   }",
									" });",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/testSessions?page-number=1&page-size=500",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"testSessions"
							],
							"query": [
								{
									"key": "page-number",
									"value": "1"
								},
								{
									"key": "page-size",
									"value": "500"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"The data as expected\", function() {   ",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"id\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"testRevisionId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"label\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"startAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"endAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsEnrolledCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsCompletedCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsInprogressCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsYetToStartCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"status\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"activeStatus\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"testLabel\")).to.equal(true);",
									"    });",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"The data as expected\", function() {   ",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"id\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedBy\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"updatedTime\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"testRevisionId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"label\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"startAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"endAt\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsEnrolledCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsCompletedCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsInprogressCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"studentsYetToStartCount\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"tenantId\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"status\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"activeStatus\")).to.equal(true);",
									"       pm.expect(jsonData.data.testSession.hasOwnProperty(\"testLabel\")).to.equal(true);",
									"    });",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"testSession\": {\r\n     \"label\": \"Exam label1 2019\",\r\n    \"maxAttemptsCount\": 3,\r\n    \"startAt\": \"2018-02-07T04:55:41.021Z\",\r\n\t\"endAt\": \"2119-03-04T23:59:00.000Z\",\r\n    \"users\": [\r\n      {\r\n        \"userId\": 74574,\r\n        \"maxAttemptsCount\": 4\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}"
					},
					"response": []
				},
				{
					"name": "users for testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"      pm.expect(jsonData.hasOwnProperty(\"status\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"error\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"data\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"warning\")).to.equal(true);",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"userId\": 74574,\r\n      \"maxAttemptsCount\": 4\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}/users"
					},
					"response": []
				},
				{
					"name": "users for testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    pm.expect(jsonData.data.testSessionUsers.hasOwnProperty(\"testSessionId\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.hasOwnProperty(\"status\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.users[0].hasOwnProperty(\"id\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.users[0].hasOwnProperty(\"totalAttempted\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.users[0].hasOwnProperty(\"status\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.users[0].hasOwnProperty(\"userId\")).to.equal(true);",
									"    pm.expect(jsonData.data.testSessionUsers.users[0].hasOwnProperty(\"maxAttemptsCount\")).to.equal(true);",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"userId\": 74574,\r\n      \"maxAttemptsCount\": 4\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}/users"
					},
					"response": []
				},
				{
					"name": "users for testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"      pm.expect(jsonData.hasOwnProperty(\"status\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"error\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"data\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"warning\")).to.equal(true);",
									"      ",
									"      pm.expect(jsonData.data).to.equal(\"successful operation\");",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"users\": [\r\n    {\r\n      \"userId\": 74574\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}/users"
					},
					"response": []
				},
				{
					"name": "testSessions with Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"     pm.expect(jsonData.hasOwnProperty(\"status\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"error\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"data\")).to.equal(true);",
									"      pm.expect(jsonData.hasOwnProperty(\"warning\")).to.equal(true);",
									"      ",
									"      pm.expect(jsonData.data).to.equal(\"successful operation\");",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.unset(\"IdGlobalValue\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testSessions/{{IdGlobalValue}}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Test Instance",
			"item": [
				{
					"name": "DynamicTestInstance",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"testInstance\": {\r\n    \"typeName\": \"Certification\",\r\n    \"randomizeAnswer\": true,\r\n    \"maxAttempts\": 3,\r\n    \"noOfQuestions\": \"100\",\r\n    \"course\": \"ACLS101\",\r\n    \"startAt\": \"2018-02-07T04:55:41.021Z\",\r\n    \"rules\": [\r\n      {\r\n        \"metadatas\": [\r\n          {\r\n            \"name\": \"Taxanomy\",\r\n            \"value\": \"Application\"\r\n          }\r\n        ],\r\n        \"itemRules\": [\r\n          {\r\n            \"itemTypeId\": 2\r\n          }\r\n        ],\r\n        \"noOfQuestions\": \"10\"\r\n      }\r\n    ],\r\n    \"copySession\": {\r\n      \"testInstanceId\": \"10\",\r\n      \"randomizeSessionItems\": true\r\n    },\r\n    \"updateItemCount\": true,\r\n    \"allItemReturn\": true,\r\n    \"displayResultOnItemSubmit\": false,\r\n    \"answerDisplayLevel\": [\r\n      {\r\n        \"name\": \"evaluate\"\r\n      }\r\n    ]\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/dynamicTestInstance"
					},
					"response": []
				},
				{
					"name": "DynamicTestPreview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"     pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalItems\")).to.equal(true);",
									"     pm.expect(jsonData.data.testInstance.hasOwnProperty(\"createdBy\")).to.equal(true);",
									"     pm.expect(jsonData.data.testInstance.hasOwnProperty(\"createdTime\")).to.equal(true);",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"testInstance\": {\r\n    \"randomizeAnswer\": true,\r\n    \"noOfQuestions\": \"100\",\r\n    \"testRevisionId\": 698,\r\n    \"rules\": [\r\n      {\r\n        \"metadatas\": [\r\n          {\r\n            \"name\": \"Taxanomy\",\r\n            \"value\": \"Application\"\r\n          }\r\n        ],\r\n        \"itemRules\": [\r\n          {\r\n            \"itemTypeId\": 2\r\n          }\r\n        ],\r\n        \"noOfQuestions\": \"10\"\r\n      }\r\n    ],\r\n    \"copySession\": {\r\n      \"testInstanceId\": \"10\",\r\n      \"randomizeSessionItems\": true\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/exam/v1/dynamicTestPreview"
					},
					"response": []
				},
				{
					"name": "TestInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    pm.test(\"The Data is as expected\", function() {",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"id\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"isPass\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"isTestMode\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"questionTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"sessionLabel\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testLabel\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testCompletedDate\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testLastAttempted\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testStart\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testStatus\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"testTime\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalCorrect\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalIncorrect\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalAnswered\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalUnAttempted\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalQuestions\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalScore\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalScorePercentage\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalCorrectItemsPercentage\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"totalTimeSpent\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"userId\")).to.equal(true);",
									"        pm.expect(jsonData.data.testInstance.hasOwnProperty(\"bookmark\")).to.equal(true);",
									"    });",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}",
									"",
									"pm.globals.set(\"IdGlobalValue\", jsonData.data.testInstance.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/testInstances?testSessionId=6404&userId=9178",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"testInstances"
							],
							"query": [
								{
									"key": "testSessionId",
									"value": "6404"
								},
								{
									"key": "userId",
									"value": "9178"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TestInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testInstances"
					},
					"response": []
				},
				{
					"name": "TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/testInstances?testSessionId={{IdGlobalValue}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"testInstances"
							],
							"query": [
								{
									"key": "testSessionId",
									"value": "{{IdGlobalValue}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Items for TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/items"
					},
					"response": []
				},
				{
					"name": "Items for TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The data message is \"] = jsonData.data === \"successful operation\";",
									"     tests[\"The warning message is \"] = jsonData.warning === \"UpdatedTime older than the last attemptedTime\";",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"itemRevisionId\": 12222,\r\n      \"userAnswer\": [\r\n        {\r\n          \"id\": 1,\r\n          \"answer\": \"Health\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"updatedTime\": \"2018-02-07T04:55:41.021Z\",\r\n  \"timeSpent\": 14,\r\n  \"submit\": false\r\n}"
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/items"
					},
					"response": []
				},
				{
					"name": "Bookmarks for TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"    tests[\"The data message is \"] = jsonData.data === \"successful operation\";",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"items\": [\r\n    {\r\n      \"revisionId\": 7294\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/itemBookmarks"
					},
					"response": []
				},
				{
					"name": "Bookmarks for TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/itemBookmarks"
					},
					"response": []
				},
				{
					"name": "items  with itemRevisionId for TestInstances with id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/items/7294"
					},
					"response": []
				},
				{
					"name": "items  with itemRevisionId for TestInstances with id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userAnswer\": [\r\n    {\r\n      \"id\": 1,\r\n      \"answer\": \"Health\"\r\n    }\r\n  ],\r\n  \"timeSpent\": 14,\r\n  \"submit\": false\r\n}"
						},
						"url": "{{url}}/exam/v1/testInstances/{{IdGlobalValue}}/items/7294"
					},
					"response": []
				}
			]
		},
		{
			"name": "Report",
			"item": [
				{
					"name": "TestSessionReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/exam/v1/testSessionReports?testRevisionId=6030",
							"host": [
								"{{url}}"
							],
							"path": [
								"exam",
								"v1",
								"testSessionReports"
							],
							"query": [
								{
									"key": "testRevisionId",
									"value": "6030"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ItemRuleSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rules\": [\r\n    {\r\n      \"metadata\": [\r\n        {\r\n          \"name\": \"meta234\",\r\n          \"value\": \"performanceTest1\"\r\n        }\r\n      ],\r\n      \"itemTypes\": [\r\n        {\r\n          \"itemTypeId\": 2\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/itemRuleSummary"
					},
					"response": []
				},
				{
					"name": "examReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"examReports\": [\r\n    {\r\n      \"metadata\": [\r\n        {\r\n          \"name\": \"metadata name1\",\r\n          \"value\": \"value associated1\"\r\n        },\r\n        {\r\n          \"name\": \"metadata name2\",\r\n          \"value\": \"value associated2\"\r\n        }\r\n      ],\r\n      \"examTypeIds\": [\r\n        1,\r\n        2\r\n      ],\r\n      \"dateFrom\": \"03/14/2019\",\r\n      \"dateTo\": \"03/14/2019\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/examReports"
					},
					"response": []
				},
				{
					"name": "itemReports",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"itemReports\": [\r\n    {\r\n      \"metadata\": [\r\n        {\r\n          \"name\": \"metadata name1\",\r\n          \"value\": \"value associated1\"\r\n        },\r\n        {\r\n          \"name\": \"metadata name2\",\r\n          \"value\": \"value associated2\"\r\n        }\r\n      ],\r\n      \"examTypeIds\": [\r\n        1,\r\n        2\r\n      ],\r\n      \"itemTypeIds\": [\r\n        1,\r\n        2,\r\n        3,\r\n        4\r\n      ],\r\n      \"dateFrom\": \"03/14/2019\",\r\n      \"dateTo\": \"03/14/2019\"\r\n    }\r\n  ]\r\n}"
						},
						"url": "{{url}}/exam/v1/itemReports"
					},
					"response": []
				},
				{
					"name": "tenantSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function() {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if (pm.response.code == 200) {",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else if (pm.response.code == 401) {",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"} else {",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \" + jsonData.error.code] = false;",
									"    tests[\"The message is \" + jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/exam/v1/tenantSettings"
					},
					"response": []
				}
			]
		},
		{
			"name": "Books",
			"item": [
				{
					"name": "books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/books?",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"books"
							],
							"query": [
								{
									"key": "name",
									"value": "A Tale Of Two Genies",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "topBooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/topBooks?events[]=contentView&startDate=2019-03-01",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"topBooks"
							],
							"query": [
								{
									"key": "events[]",
									"value": "contentView"
								},
								{
									"key": "startDate",
									"value": "2019-03-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "readHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/report/v1/readHistory"
					},
					"response": []
				},
				{
					"name": "productTimespent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/productTimespent?startDate=2019-03-02",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"productTimespent"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2019-03-02"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "productTimespentSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/productTimespentSummary?startDate=2018-03-01",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"productTimespentSummary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-03-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "productPageSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/productPageSummary?bookId=554&events[]=pageView&events[]=bookmarkAdd&startDate=2019-03-01",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"productPageSummary"
							],
							"query": [
								{
									"key": "bookId",
									"value": "554"
								},
								{
									"key": "events[]",
									"value": "pageView"
								},
								{
									"key": "events[]",
									"value": "bookmarkAdd"
								},
								{
									"key": "startDate",
									"value": "2019-03-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "productContentSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/productPageSummary?bookId=554&events=pageView&events=bookmarkAdd&startDate=2019-03-01",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"productPageSummary"
							],
							"query": [
								{
									"key": "bookId",
									"value": "554"
								},
								{
									"key": "events",
									"value": "pageView"
								},
								{
									"key": "events",
									"value": "bookmarkAdd"
								},
								{
									"key": "startDate",
									"value": "2019-03-01"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Realtime",
			"item": [
				{
					"name": "realtimeUserSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/realtimeUserSummary?startDate=\"2019-03-01 09:30\"",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"realtimeUserSummary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "\"2019-03-01 09:30\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "realtimeEventSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/realtimeEventSummary?startTime =2019-03-01 10: 00&eventTypes[]=pageView&eventTypes[]=bookmarkAdd",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"realtimeEventSummary"
							],
							"query": [
								{
									"key": "startTime ",
									"value": "2019-03-01 10: 00"
								},
								{
									"key": "eventTypes[]",
									"value": "pageView"
								},
								{
									"key": "eventTypes[]",
									"value": "bookmarkAdd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "realtimeActivity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/realtimeActivity?startTime =2019-03-01 10: 00&eventTypes[]=pageView&eventTypes[]=bookmarkAdd",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"realtimeActivity"
							],
							"query": [
								{
									"key": "startTime ",
									"value": "2019-03-01 10: 00"
								},
								{
									"key": "eventTypes[]",
									"value": "pageView"
								},
								{
									"key": "eventTypes[]",
									"value": "bookmarkAdd"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "realtimeUserCountrySummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/realtimeUserCountrySummary?startTime =2019-07-03 12:12",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"realtimeUserCountrySummary"
							],
							"query": [
								{
									"key": "startTime ",
									"value": "2019-07-03 12:12"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "realtimeReadHistory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"      tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 401){",
									"    tests[\"The response code is 401\"] = false;",
									"    tests[\"The error is \"+ jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"    tests[\"The error is \"+jsonData.error.code] = false;",
									"    tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/report/v1/realtimeReadHistory"
					},
					"response": []
				}
			]
		},
		{
			"name": "Events Collector",
			"item": [
				{
					"name": "events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"event\": {\r\n    \"eventType\": \"string\",\r\n    \"eventTimestamp\": 150820272406,\r\n    \"eventVersion\": 3.1,\r\n    \"application\": {\r\n      \"appId\": \"a3748c1a14344c30977659437f2230fc\",\r\n      \"packageName\": \"com.elsevier.elibraryReader\",\r\n      \"sdk\": {\r\n        \"name\": \"aws-sdk-iOS\",\r\n        \"version\": \"2.4.9\"\r\n      },\r\n      \"title\": \"eReader\",\r\n      \"versionName\": 5.5,\r\n      \"versionCode\": 55\r\n    },\r\n    \"device\": {\r\n      \"locale\": {\r\n        \"code\": \"ja_JP\",\r\n        \"country\": \"JP\",\r\n        \"language\": \"ja\"\r\n      },\r\n      \"make\": \"apple\",\r\n      \"model\": \"iPhone\",\r\n      \"platform\": {\r\n        \"name\": \"iOS\",\r\n        \"version\": \"11.4.1\"\r\n      }\r\n    },\r\n    \"session\": {\r\n      \"sessionId\": \"7f2230fc-A04604FF-20180727-065750249\"\r\n    },\r\n    \"attributes\": {\r\n      \"screenWidth\": 320,\r\n      \"pageNumber\": 172,\r\n      \"institutionId\": 1,\r\n      \"ip\": \"163.212.32.61\",\r\n      \"screenHeight\": 568,\r\n      \"screenName\": \"Reader\",\r\n      \"type\": \"reader\",\r\n      \"userId\": 1,\r\n      \"bookId\": 7759,\r\n      \"appUUID\": \"2ca2a3b7c3319c9c3a746b4e3a6defa63eedd26e\",\r\n      \"tenantId\": 1,\r\n      \"displayOrientation\": \"portrait\",\r\n      \"siteId\": 186,\r\n      \"touchX\": 154.5,\r\n      \"displayPageNumber\": \"1-3\",\r\n      \"fileFormat\": \"pdf\",\r\n      \"touchY\": 392\r\n    },\r\n    \"metrics\": {\r\n      \"battery\": 0.63,\r\n      \"bookFileSize\": 67897,\r\n      \"bookDownloadTime\": 2345,\r\n      \"bookOpenTime\": 1325376193017,\r\n      \"readerLoadTime\": 1325376193017\r\n    }\r\n  }\r\n}"
						},
						"url": "{{url}}/report/v1/events"
					},
					"response": []
				}
			]
		},
		{
			"name": "Sessions",
			"item": [
				{
					"name": "Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/sessions?startDate=2019-05-28&dimension=day",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"sessions"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2019-05-28"
								},
								{
									"key": "dimension",
									"value": "day"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sessionSummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/sessionSummary?startDate=2019-05-28",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"sessionSummary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2019-05-28"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "sessionSegments",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/sessionSegments?startDate=2019-05-28&segment=device_platform",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"sessionSegments"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2019-05-28"
								},
								{
									"key": "segment",
									"value": "device_platform"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Institution (Analytics)",
			"item": [
				{
					"name": "institutions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/report/v1/institutions"
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/events?startDate=2018-05-28&dimension=day",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"events"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-05-28"
								},
								{
									"key": "dimension",
									"value": "day"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "EventFilters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// pm.test(\"Content-Type is present\", function () {",
									"//     pm.response.to.have.header(\"Content-Type\");",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//       tests[\"The response code is 200\"] = true;",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/eventFilters?filterType=event_type",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"eventFilters"
							],
							"query": [
								{
									"key": "filterType",
									"value": "event_type"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users (Analytics)",
			"item": [
				{
					"name": "users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{url}}/report/v1/users"
					},
					"response": []
				},
				{
					"name": "userEvents",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/userEvents?startDate=2018-09-27&events[]=pageView",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"userEvents"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-09-27"
								},
								{
									"key": "events[]",
									"value": "pageView"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "userEventSummary",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/userEventSummary?startDate=2018-09-27&events[]=pageView",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"userEventSummary"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-09-27"
								},
								{
									"key": "events[]",
									"value": "pageView"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "newUsers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/newUsers?startDate=2018-09-27",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"newUsers"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-09-27"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "activeUsers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2a102088-6602-4fd4-abe7-94e55df6a459",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5b720f7b-fa53-4147-8da1-93d8b1711a32",
								"exec": [
									"// var jsonData = JSON.parse(responseBody);",
									"",
									"// //Verify Status code",
									"// pm.test(\"Status code is 200\", function () {",
									"//      pm.response.to.have.status(200);",
									"// });",
									"",
									"// if(pm.response.code == 200){",
									"//     //verify user count",
									"//     tests[\"Users cont is matched with the response\"] = jsonData.data._pagination.pageSize === jsonData.data.users.length;",
									"",
									"//     //Verify type",
									"//     pm.test(\"Verify the type should be user\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         pm.expect(jsonData.data.users[i].type).to.equal(\"user\");",
									"//         }",
									"//     });",
									"",
									"//     // Verify users types",
									"//     pm.test(\"Verify the type should be userTypeName\", function () {",
									"//     for(var i=0;i<jsonData.data.users.length;i++){",
									"//         if(jsonData.data.users[i].userTypeName === \"Admin\" || \"Learner\"){",
									"//             tests[\"userTypeName value is mached\"] = true;",
									"//         }",
									"//         else",
									"//         {",
									"//             tests[\"userTypeName value is not mached\"] = false;",
									"//         }",
									"//     }",
									"//     });",
									"// }",
									"// else  if(pm.response.code == 401){",
									"//     tests[\"The response code is 401\"] = false;",
									"//     tests[\"The error is \"+ jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }",
									"// else{",
									"//     tests[\"The response code is \" + pm.response.code] = false;",
									"//     tests[\"The error is \"+jsonData.error.code] = false;",
									"//     tests[\"The message is \"+jsonData.error.message] = false;",
									"// }"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/report/v1/activeUsers?startDate=2018-09-27",
							"host": [
								"{{url}}"
							],
							"path": [
								"report",
								"v1",
								"activeUsers"
							],
							"query": [
								{
									"key": "startDate",
									"value": "2018-09-27"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "tenantSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.test(\"Successful POST request\", function () {",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"if(pm.response.code == 200){",
									"    tests[\"The response code is 200\"] = true;",
									"}",
									"else  if(pm.response.code == 400){",
									"    tests[\"The response code is 400\"] = false;",
									"     tests[\"The error is \"+ jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}",
									"else{",
									"    tests[\"The response code is \" + pm.response.code] = false;",
									"     tests[\"The error is \"+jsonData.error.code] = false;",
									"      tests[\"The message is \"+jsonData.error.message] = false;",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Jwt-Token",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{url}}/catalog/v1/tenantSettings?keys=imagePreviewUrl ",
							"host": [
								"{{url}}"
							],
							"path": [
								"catalog",
								"v1",
								"tenantSettings"
							],
							"query": [
								{
									"key": "keys",
									"value": "imagePreviewUrl "
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": []
		},
		{
			"name": "realtimeUserSummary Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Content-Type is present\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"if(pm.response.code == 200){",
							"      tests[\"The response code is 200\"] = true;",
							"}",
							"else  if(pm.response.code == 401){",
							"    tests[\"The response code is 401\"] = false;",
							"    tests[\"The error is \"+ jsonData.error.code] = false;",
							"    tests[\"The message is \"+jsonData.error.message] = false;",
							"}",
							"else{",
							"    tests[\"The response code is \" + pm.response.code] = false;",
							"    tests[\"The error is \"+jsonData.error.code] = false;",
							"    tests[\"The message is \"+jsonData.error.message] = false;",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-Jwt-Token",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/report/v1/realtimeUserSummary?startTime =2019-03-01 10:00",
					"host": [
						"{{url}}"
					],
					"path": [
						"report",
						"v1",
						"realtimeUserSummary"
					],
					"query": [
						{
							"key": "startTime ",
							"value": "2019-03-01 10:00"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Notification",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b7b4cef4-8fb2-4cb6-800a-62d9677ee2d5",
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"",
							"if (pm.response.code == 200) {",
							"    tests[\"The response code is 200\"] = true;",
							"}",
							"else if (pm.response.code == 401) {",
							"    tests[\"The response code is 401\"] = false;",
							"    tests[\"The error is \" + jsonData.error.code] = false;",
							"    tests[\"The message is \" + jsonData.error.message] = false;",
							"} else {",
							"    tests[\"The response code is \" + pm.response.code] = false;",
							"    tests[\"The error is \" + jsonData.error.code] = false;",
							"    tests[\"The message is \" + jsonData.error.message] = false;",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-Jwt-Token",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"userDeviceInstance\": {\r\n    \"userId\": \"39\",\r\n    \"instanceId\": \"cBfvbTpkJlU:APA91bH6G1dfpVWWo67np9QbvjusqWjux_JQ2oIBfWbngaaiZAOxAwyQAxL4zWPRhvs\",\r\n    \"device\": {\r\n      \"make\": \"Lenovo\",\r\n      \"model\": \"K8 plus\",\r\n      \"platform\": \"Android\",\r\n      \"version\": \"8.0.0\"\r\n    }\r\n  }\r\n}"
				},
				"url": "{{url}}/notification/v1/userDeviceInstances"
			},
			"response": []
		}
	]
}